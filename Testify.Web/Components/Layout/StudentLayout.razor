@inherits LayoutComponentBase

@inject NavigationManager NavigationManager
@if (isLoading == true)
{
    <MudOverlay Visible="isLoading" Style="background-color:white; opacity:1;" LightBackground="true" LockScroll="true" Absolute="true">
        <MudProgressCircular Color="Color.Success" Size="Size.Large" Indeterminate="true" />
        <MudText Color="Color.Secondary" Align="Align.Center">ƒêang x·ª≠ l√Ω</MudText>
    </MudOverlay>
}
<MudThemeProvider Theme="@_theme" IsDarkMode="_isDarkMode" />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />
<MudLayout>
    <MudAppBar Elevation="1" Style="position: sticky">
        <MudLink Typo="Typo.h5" Class="" Color="Color.Primary" Href="/">Testify</MudLink>
        <MudSpacer />
        <MudButton Href="/Student/Home">
            T·ªïng quan
        </MudButton>
        <MudButton>
            L·ªõp
        </MudButton>
        <MudMenu Label="L·ªãch thi">
            <MudMenuItem>L·ªãch thi c·ªßa t√¥i</MudMenuItem>
            <MudMenuItem Href="/Student/Calendar">L·ªãch thi s·∫Øp t·ªõi</MudMenuItem>
            <MudMenuItem>Armory</MudMenuItem>
        </MudMenu>
        <MudSpacer />
        <MudIconButton Icon="@(DarkLightModeButtonIcon)" Color="Color.Inherit" OnClick="@DarkModeToggle" />
        <MudMenu>
            <ActivatorContent>
                <MudAvatar Color="Color.Tertiary">L</MudAvatar>
            </ActivatorContent>
            <ChildContent>
                <MudMenuItem>Th√¥ng tin c√° nh√¢n</MudMenuItem>
                <MudMenuItem OnClick="Logout">ƒêƒÉng xu·∫•t</MudMenuItem>
              
            </ChildContent>
        </MudMenu>

    </MudAppBar>

    <MudMainContent Class="pt-0">
        @Body
       
    </MudMainContent>
</MudLayout>


<div id="blazor-error-ui">
    ƒê√£ c√≥ l·ªói s·∫£y ra
    <a href="" class="reload">Reload</a>
    <a class="dismiss">üóô</a>
</div>

@code {
    private bool _drawerOpen = true;
    private bool _isDarkMode = false;
    private MudTheme? _theme = null;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        _theme = new()
            {
                PaletteLight = _lightPalette,
                PaletteDark = _darkPalette,
                LayoutProperties = new LayoutProperties()
            };
       
    }

    private bool isTokenValid = true;
    private bool isLoading = true;
    protected async override void OnAfterRender(bool firstRender)
    {
        if (firstRender && isLoading == true)
        {
            isTokenValid = await CheckingToken();
            isLoading = false;
            StateHasChanged();
            if (isTokenValid == false)
            {
                navigation.NavigateTo("/");

            }

        }
    }
    private async Task<bool> CheckingToken()
    {
        var token = await localStorage.GetItemAsStringAsync("token");
        if (string.IsNullOrEmpty(token))
        {
            return false;
        }
        else
        {
            var modelLogin = await _serviceAccess.CheckAccessStatusByToken(token);
            if (modelLogin.IsLoginSucces != true)
            {
                return false;
            }
            if (modelLogin.IsLoginSucces == true && modelLogin.LevelId != 4)
            {
                return false;
            }

        }
        return true;
    }




    private void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    private void DarkModeToggle()
    {
        _isDarkMode = !_isDarkMode;
    }

    private readonly PaletteLight _lightPalette = new()
        {
            Primary = "#29A69A",
            Black = "#110e2d",
            AppbarText = "#424242",
            AppbarBackground = "rgba(255,255,255,0.8)",
            DrawerBackground = "#ffffff",
            GrayLight = "#e8e8e8",
            GrayLighter = "#f9f9f9",
        };

    private void GoToRegister()
    {
        NavigationManager.NavigateTo("/RegisterSelector");
    }

    private readonly PaletteDark _darkPalette = new()
        {
            Primary = "#7e6fff",
            Surface = "#1e1e2d",
            Background = "#1a1a27",
            BackgroundGray = "#151521",
            AppbarText = "#92929f",
            AppbarBackground = "rgba(26,26,39,0.8)",
            DrawerBackground = "#1a1a27",
            ActionDefault = "#74718e",
            ActionDisabled = "#9999994d",
            ActionDisabledBackground = "#605f6d4d",
            TextPrimary = "#b2b0bf",
            TextSecondary = "#92929f",
            TextDisabled = "#ffffff33",
            DrawerIcon = "#92929f",
            DrawerText = "#92929f",
            GrayLight = "#2a2833",
            GrayLighter = "#1e1e2d",
            Info = "#4a86ff",
            Success = "#3dcb6c",
            Warning = "#ffb545",
            Error = "#ff3f5f",
            LinesDefault = "#33323e",
            TableLines = "#33323e",
            Divider = "#292838",
            OverlayLight = "#1e1e2d80",
        };

    public string DarkLightModeButtonIcon => _isDarkMode switch
    {
        true => Icons.Material.Rounded.AutoMode,
        false => Icons.Material.Outlined.DarkMode,
    };

    private async void Logout()
    {
        await localStorage.RemoveItemAsync("token");
        navigation.NavigateTo("/");
    }
}
