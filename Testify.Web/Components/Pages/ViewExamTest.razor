@page "/ExamTest/{idExam:int}"
@using System.Text.Json
@using Testify.DAL.ViewModels
@using Testify.Web.Data.Commons
@inject IJSRuntime JS
@inject NavigationManager navigation
<style>
    .hidden-scroll {
        overflow-y: scroll;
        scrollbar-width: none;
    }

        .hidden-scroll::-webkit-scrollbar {
            display: none;
        }

</style>

@if (isLoading)
{
    <MudPaper Style="width: 100%; height: 100vh; display: flex; justify-content: center; align-items: center">
        <Testify.Web.Shared.LoadingContext />
    </MudPaper>
}
else
{
    <MudDrawer @bind-Open="@_open" Width="30%" ClipMode="DrawerClipMode.Never" Elevation="3" Anchor="Anchor.End" Variant="@DrawerVariant.Responsive">
        <MudDrawerHeader Class="align-items-center">
            <MudText Class="h5 fw-light m-0">Thí sinh: <b>@user.FullName</b></MudText>
        </MudDrawerHeader>
        <MudPaper Elevation="0" Class="w-100 pt-5 px-4 h-100 position-relative">
            <MudText Class="fs-3 fw-bold text-center text-uppercase">@exam.Name</MudText>
            <MudText Class="fs-4 text-center">@timeRemaining</MudText>
            <MudPaper Elevation="0" Class="w-100 d-flex justify-content-start gap-3 flex-wrap py-5 hidden-scroll" Style="max-height: 400px; overflow: scroll">
                @if (_lstQuestionWithAnswers != null)
                {
                    @foreach (var a in _lstQuestionWithAnswers)
                    {
                        sttList = 1;
                        bool isSelect = _lstQAndASelect.Any(x => x.QuestionId == a.Id);
                        if (isSelect)
                        {
                            <MudButton Style="background-color: #29a69a; color: #fff; width: 50px; height: 50px;">@(sttList++)</MudButton>
                        }
                        else
                        {
                            <MudButton Style="color: #000; width: 50px; height: 50px; border: 1px solid rgba(0, 0, 0, 0.2)">@(sttList++)</MudButton>
                        }
                    }
                }
            </MudPaper>
            <MudPaper Elevation="0" Class="position-absolute bottom-0 start-0 end-0">
                <MudGrid Class="p-0 m-0 w-100">
                    <MudItem xl="12" lg="12" md="12" sm="12" xs="12" Class="px-2 py-lg-3 py-2">
                        <MudButton Class="w-100 text-white" Style="background-color: #29a69a" OnClick="OnSubmit">Nộp bài</MudButton>
                    </MudItem>
                </MudGrid>
            </MudPaper>
        </MudPaper>
    </MudDrawer>
    <MudMainContent>
        <MudAppBar Elevation="2">
            <MudText Class="h5 m-0">Thời gian còn lại: <b class="h5">@timeRemaining</b></MudText>
            <MudSpacer />
            <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Class="d-lg-none d-block" Edge="Edge.End" OnClick="@ToggleDrawer" />
        </MudAppBar>
        <MudPaper Elevation="0" Class="p-4">
            @if (_lstQuestionWithAnswers != null)
            {
                foreach (var q in _lstQuestionWithAnswers)
                {
                    stt = 1;
                    <MudPaper Elevation="0" Class="w-100 mb-5">
                        <MudPaper Elevation="4" Class="bg-transparent w-100">
                            <MudText Class="fw-bold text-white p-4 rounded-top rounded-3" Style="background-color: #29a69a;"><b>Câu @(stt++):</b> @q.Content</MudText>
                            <MudGrid Class="pb-4 m-0 w-100">
                                @for (int i = 0; i < q.Answers.Count; i++)
                                {
                                    var answer = q.Answers[i];
                                    string contentAnswer = (char)('A' + i) + $". {answer.Content}";
                                    bool isSelect = _lstQAndASelect.Any(x => x.QuestionId == q.Id && x.Answers.Any(y => y.Id == answer.Id));
                                    int bindChecked = isSelect == true ? 1 : 0;
                                    @if (q.QuestionType == Convert.ToInt32(listQuestionTypes.SingleChoice) || q.QuestionType == Convert.ToInt32(listQuestionTypes.YesNo))
                                    {
                                        if (isSelect)
                                        {
                                            <MudItem xl="6" lg="6" md="6" sm="12" xs="12" Class="px-4">
                                                <MudButton Class="py-3 w-100 text-truncate text-wrap h-100"
                                                           Style="border-radius: 10px; transition: 0.3s ease; border: 1px solid rgba(0, 0, 0, 0.2); background-color: rgba(0, 0, 0, 0.2)"
                                                           OnClick="@(() => IsSelectAnswerSingle(q.Id, answer.Id))">
                                                    <MudText Class="text-start w-100">@contentAnswer</MudText>
                                                </MudButton>
                                            </MudItem>
                                        }
                                        else
                                        {
                                            <MudItem xl="6" lg="6" md="6" sm="12" xs="12" Class="px-4">
                                                <MudButton Class="py-3 w-100 text-truncate text-wrap h-100"
                                                           Style="border-radius: 10px; transition: 0.3s ease; border: 1px solid rgba(0, 0, 0, 0.2)"
                                                           OnClick="@(() => IsSelectAnswerSingle(q.Id, answer.Id))">
                                                    <MudText Class="text-start w-100">@contentAnswer</MudText>
                                                </MudButton>
                                            </MudItem>
                                        }
                                    }
                                    else
                                    {
                                        <MudItem xl="6" lg="6" md="6" sm="12" xs="12" Class="px-4">
                                            <MudCheckBox T="bool" Label="@contentAnswer" @bind-Value="@isSelect" Class="py-1 text-start w-100 text-truncate text-wrap h-100"
                                                         Style="border-radius: 10px; transition: 0.3s ease; border: 1px solid rgba(0, 0, 0, 0.2)"
                                                         onclick="@(() => IsSelectAnswerMulti(q.Id, answer.Id))"></MudCheckBox>
                                        </MudItem>
                                    }
                                }
                            </MudGrid>
                        </MudPaper>
                    </MudPaper>
                }
            }
        </MudPaper>
    </MudMainContent>
}

@code {
    [Inject]
    private IDialogService _mudDialogServices { get; set; }
    [Parameter]
    public int idExam { get; set; }

    private Exam exam { get; set; } = new();
    private User user { get; set; } = new();
    private int timeDoExam = 0;
    private string timeRemaining = "";
    private System.Timers.Timer timer;
    private int countdownTime;
    private bool isLoading = true;
    private Guid _userId;
    private int idExamDetail;
    private int stt;
    private int sttList;
    private bool _open = true;
    private bool isReload = false;
    private int _tabCount = 0;
    private int examscheduleId;

    [Parameter]
    public int submissionId { get; set; }
    private DotNetObjectReference<ViewExamTest> _objectReference;

    private List<ExamDetail> _lstexamDetails = new List<ExamDetail>();
    private List<ExamDetailQuestion> _lstexamDetailsQuestion = new List<ExamDetailQuestion>();
    private List<QuestionWithAnswer> _lstQuestionWithAnswers = new List<QuestionWithAnswer>();
    private List<QuestionAndAnswerChoosen> _lstQAndASelect = new List<QuestionAndAnswerChoosen>();

    private void ToggleDrawer()
    {
        _open = !_open;
    }

    protected override async Task OnInitializedAsync()
    {
        CheckInput();
        isLoading = true;

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                isLoading = true;
                var examId = await localStorage.GetItemAsync<string>("IdExam");
                if (string.IsNullOrEmpty(examId) || examId == "0")
                {
                    exam = await _serExam.GetExamId(idExam);
                }else
                {
                    idExam = Convert.ToInt32(examId);
                    exam = await _serExam.GetExamId(idExam);
                }
                await LoadData();
                await LoadExam();
                StartCountdown();
                _objectReference = DotNetObjectReference.Create(this);
                await JS.InvokeVoidAsync("initVisibilityChangeHandler", _objectReference);
            }
            catch
            {

            }
            finally
            {
                isLoading = false;
            }

        }
    }

    [JSInvokable]
    public async void ShowTabOutNotification()
    {
        _tabCount++;
        await localStorage.SetItemAsync("_tabCount", _tabCount);
        JS.InvokeVoidAsync("updateTabOutCountInLocalStorage", _tabCount);
    }

    public void Dispose()
    {
        _objectReference?.Dispose();
    }

    private async Task LoadData()
    {
        var userId = await ProtectedSessionStore.GetAsync<string>("userLogin");
        _userId = Guid.Parse(userId.Value);
        user = await _serLec.GetLecturerById(_userId);

    }

    private void CheckInput()
    {
        if (idExam <= 0)
        {
            snackbar.Add("Không có bài thi nào!", Severity.Warning);
            navigation.NavigateTo("/Admin/Home");
            return;
        }
    }

    private async Task LoadExam()
    {
        Random rad = new Random();
        var idExamDetailLocalStorage = await localStorage.GetItemAsync<string>("IdExamDetail");
        var idExamSchedule = await localStorage.GetItemAsync<string>("ExamScheduleId");

        snackbar.Add(idExamDetailLocalStorage == null ? "chưa có" : idExamDetailLocalStorage);
        if (idExamDetailLocalStorage != "" && idExamDetailLocalStorage != null && idExamSchedule != null)
        {
            isReload = true;
            var lstQAndASelect = JsonSerializer.Deserialize<List<QuestionAndAnswerChoosen>>(await localStorage.GetItemAsync<string>("_lstQAndASelect"));
            idExamDetail = Convert.ToInt32(idExamDetailLocalStorage);
            if (idExamDetail == null || idExamDetail <= 0)
            {
                snackbar.Add("Có lỗi", Severity.Warning);
                navigation.NavigateTo("/Admin/Home");
                return;
            }
            _lstexamDetailsQuestion = await _serExamDetailQuestion.GetAllByExamDetailId(idExamDetail);
            foreach (var item in _lstexamDetailsQuestion)
            {
                Question question = await _serQuestion.GetQuestionById(item.QuestionId);
                List<Answer> shuffledAnswer = (await _serAnswer.GetAllByQuestionId(item.QuestionId)).OrderBy(x => rad.Next()).ToList();
                QuestionWithAnswer questionWithAnswer = new QuestionWithAnswer()
                    {
                        Id = question.Id,
                        Content = question.Content,
                        QuestionType = question.QuestionTypeId,
                        Answers = shuffledAnswer
                    };

                _lstQuestionWithAnswers.Add(questionWithAnswer);
            }
            _lstQAndASelect = lstQAndASelect;
            return;
        }

        _lstexamDetails = await _serExamDetail.GetExamDetailByExamIdActive(idExam);
        if (_lstexamDetails == null || _lstexamDetails.Count == 0)
        {
            snackbar.Add("Lỗi bài thi", Severity.Warning);
            navigation.NavigateTo("/Student/Home");
            return;
        }

        var indexExamdetail = rad.Next(_lstexamDetails.Count);
        idExamDetail = _lstexamDetails[indexExamdetail].Id;
        if (idExamDetail == null || idExamDetail <= 0)
        {
            snackbar.Add("Có lỗi", Severity.Warning);
            navigation.NavigateTo("/Student/Home");
            return;
        }

        ExamActivityLog examActivityLog = new ExamActivityLog();
        examActivityLog.ExamId = idExam;
        examActivityLog.UserId = _userId;
        examActivityLog.ExamDetailId = idExamDetail;
        examActivityLog.ActionTime = DateTime.Now;
        examActivityLog.ActionType = "Mở bài thi";
        examActivityLog.ExamScheduleId = Convert.ToInt32(idExamSchedule);
        var logStat = await _serExamActLog.Create(examActivityLog);

        if (logStat == false)
        {
            snackbar.Add("Có lỗi, không ghi được log exam", Severity.Warning);

            return;
        }

        _lstexamDetailsQuestion = await _serExamDetailQuestion.GetAllByExamDetailId(idExamDetail);
        foreach (var item in _lstexamDetailsQuestion)
        {
            Question question = await _serQuestion.GetQuestionById(item.QuestionId);
            var lstAns = await _serAnswer.GetAllByQuestionId(item.QuestionId);
            List<Answer> shuffledAnswer = lstAns.Where(x => x.Status != 255).OrderBy(x => rad.Next()).ToList();
            QuestionWithAnswer questionWithAnswer = new QuestionWithAnswer()
                {
                    Id = question.Id,
                    Content = question.Content,
                    QuestionType = question.QuestionTypeId,
                    Answers = shuffledAnswer
                };

            _lstQuestionWithAnswers.Add(questionWithAnswer);
        }
        await localStorage.SetItemAsync("IdExam", idExam);
        await localStorage.SetItemAsync("IdExamDetail", idExamDetail);
        await localStorage.SetItemAsync("_lstQAndASelect", _lstQAndASelect);
    }

    private async Task IsSelectAnswerSingle(int questionId, int answerId)
    {
        List<Answer> lstAnswers = new List<Answer>();
        var objanswer = await _serAnswer.GetById(answerId);
        lstAnswers.Add(objanswer);
        var objQuestionAndAnswer = _lstQAndASelect.FirstOrDefault(x => x.QuestionId == questionId);
        if (objQuestionAndAnswer != null)
        {
            objQuestionAndAnswer.Answers = lstAnswers;
            await localStorage.SetItemAsync("_lstQAndASelect", _lstQAndASelect);
        }
        else
        {
            _lstQAndASelect.Add(new QuestionAndAnswerChoosen { QuestionId = questionId, Answers = lstAnswers });
            await localStorage.SetItemAsync("_lstQAndASelect", _lstQAndASelect);
        }
    }

    private async Task IsSelectAnswerMulti(int questionId, int answerId)
    {
        List<Answer> lstAnswers = new List<Answer>();
        var objanswer = await _serAnswer.GetById(answerId);
        lstAnswers.Add(objanswer);
        var objQuestionAndAnswer = _lstQAndASelect.FirstOrDefault(x => x.QuestionId == questionId);
        if (objQuestionAndAnswer != null)
        {
            if (objQuestionAndAnswer.Answers.Any(x => x.Id == answerId) && objQuestionAndAnswer.Answers.Count > 1)
            {
                objQuestionAndAnswer.Answers.RemoveAll(x => x.Id == answerId);
                await localStorage.SetItemAsync("_lstQAndASelect", _lstQAndASelect);
            }
            else if (objQuestionAndAnswer.Answers.Any(x => x.Id == answerId) && objQuestionAndAnswer.Answers.Count == 1)
            {
                _lstQAndASelect.RemoveAll(x => x.QuestionId == questionId);
                await localStorage.SetItemAsync("_lstQAndASelect", _lstQAndASelect);
            }
            else
            {
                objQuestionAndAnswer.Answers.Add(objanswer);
                await localStorage.SetItemAsync("_lstQAndASelect", _lstQAndASelect);
            }

        }
        else
        {
            _lstQAndASelect.Add(new QuestionAndAnswerChoosen { QuestionId = questionId, Answers = lstAnswers });
            await localStorage.SetItemAsync("_lstQAndASelect", _lstQAndASelect);
        }
    }

    private async Task ScoreExam()
    {
        await InvokeAsync(async () =>
        {
            try
            {
                isLoading = true;
                StateHasChanged();
                timer.Stop();
                await JS.InvokeVoidAsync("removeVisibilityChangeHandler");
                Submission submission = new Submission();
                double score = 0;
                bool isPassed = false;
                int answered = 0;
                foreach (var q in _lstQAndASelect)
                {
                    answered++;
                    AnswerAndQuestion QnA = await _serQuestion.GetTrueAnswerOfQuesiton(q.QuestionId, idExamDetail);

                    if (q.Answers.Count() == 1)
                    {
                        foreach (var a in q.Answers)
                        {
                            if (a.IsCorrect == true)
                            {
                                score += QnA.PointOfQuestion;
                            }
                        }
                    }
                    else
                    {
                        bool allAnswerTrue = (q.Answers.Where(x => x.IsCorrect == true).Count() == QnA.LstAnswer.Count() && q.Answers.Count() == QnA.LstAnswer.Count());
                        if (allAnswerTrue)
                        {
                            score += QnA.PointOfQuestion;
                        }
                    }
                }

                int unAswered = exam.NumberOfQuestions - answered;

                if (score >= exam.PassMark)
                {
                    isPassed = true;
                }
                else
                {
                    isPassed = false;
                }
                var exSchedule = await localStorage.GetItemAsync<string>("ExamScheduleId");
                submission.UserId = _userId;
                submission.ExamDetailId = idExamDetail;
                submission.ExamScheduleId = Convert.ToInt32(exSchedule); ;
                submission.SubmitTime = DateTime.Now;
                submission.TimeTaken = TimeSpan.FromSeconds(timeDoExam);
                submission.TotalMark = Math.Round(score, 2);
                submission.IsPassed = isPassed;
                submission.UnAnswered = unAswered;
                submission.Answered = answered;
                submission.Note = _tabCount > 0 ? $"Rời khỏi trang {_tabCount} lần" : "";
                submission.Status = true;

                var objSub = await _serSubmission.CreateSubmission(submission);
                if (objSub != null)
                {
                    AnswerSubmission AnS = new AnswerSubmission();

                    foreach (var item in _lstQAndASelect)
                    {
                        AnS.SubmissionId = objSub.Id;
                        AnS.QuestionId = item.QuestionId;
                        foreach (var a in item.Answers)
                        {
                            AnS.AnswerId = a.Id;
                            await _serAnS.CreateAnswerSubmission(AnS);
                        }
                    }

                    ExamActivityLog examActivityLog = new ExamActivityLog();
                    examActivityLog.ExamId = idExam;
                    examActivityLog.UserId = submission.UserId;
                    examActivityLog.ExamDetailId = submission.ExamDetailId;
                    examActivityLog.ActionTime = DateTime.Now;
                    examActivityLog.ActionType = "Nộp bài thi";
                    var logStat = await _serExamActLog.Create(examActivityLog);

                    if (logStat == false)
                    {
                        snackbar.Add("Có lỗi, không ghi được log exam", Severity.Warning);
                        return;
                    }

                    snackbar.Add("Nộp bài thành công", Severity.Success);
                    await localStorage.RemoveItemAsync("IdExam");
                    await localStorage.RemoveItemAsync("IdExamDetail");
                    await localStorage.RemoveItemAsync("ExamScheduleId");
                    await localStorage.RemoveItemAsync("_lstQAndASelect");
                    await localStorage.RemoveItemAsync("_tabCount");
                    await localStorage.RemoveItemAsync("TimeStart");
                    navigation.NavigateTo("/Student/Home");
                }
                else
                {
                    snackbar.Add("Nộp bài thất bại", Severity.Error);
                }
            }
            catch
            {

            }
            finally
            {
                isLoading = false;
                StateHasChanged();
            }
        });

    }

    private readonly DialogOptions _noHeader = new() { NoHeader = true };

    private async Task OnSubmit()
    {
        DialogOptions backdropClick = new() { BackdropClick = false };

        var confirm = await _mudDialogServices.ShowMessageBox
            (
                "Thông báo",
                "Bạn chắc chắn muốn nộp bài thi?",
                "Xác nhận",
                null,
                cancelText: "Cancel",
                backdropClick

            );

        if (confirm == true)
        {
            await ScoreExam();
        }
    }

    private async void StartCountdown()
    {

        timer = new System.Timers.Timer(1000);

        var storedTime = await localStorage.GetItemAsync<string>("TimeStart");

        if (!string.IsNullOrEmpty(storedTime) && isReload)
        {
            var elapsedSeconds = (DateTime.Now - DateTime.Parse(storedTime)).TotalSeconds;
            countdownTime = (exam.Duration * 60) - (int)elapsedSeconds;

            if (countdownTime <= 0)
            {
                snackbar.Add("Thời gian làm bài đã hết. Đang nộp bài...", Severity.Warning);
                await ScoreExam();
                return;
            }
        }
        else
        {
            countdownTime = exam.Duration * 60;
        }

        timer.Elapsed += OnTimedEvent;
        timer.Start();
    }

    private void FormatTime()
    {
        TimeSpan ts = TimeSpan.FromSeconds(countdownTime);

        if (ts.TotalMinutes <= 60)
        {
            timeRemaining = $"{ts.Minutes:D2}:{ts.Seconds:D2}";
        }
        else
        {
            timeRemaining = $"{ts.Hours:D2}:{ts.Minutes:D2}:{ts.Seconds:D2}";
        }
    }

    private async void OnTimedEvent(Object source, System.Timers.ElapsedEventArgs e)
    {
        if (countdownTime > 0)
        {
            countdownTime--;
            timeDoExam++;
            await InvokeAsync(async () =>
            {
                FormatTime();
                InvokeAsync(StateHasChanged);
            });
        }
        else
        {
            timer.Stop(); 
            await ScoreExam();
        }
    }

    private async Task Cancle()
    {
        DialogOptions backdropClick = new() { BackdropClick = false };

        var confirm = await _mudDialogServices.ShowMessageBox
            (
                "Thông báo",
                "Bạn chắc chắn muốn thoát?",
                "Xác nhận",
                null,
                cancelText: "Cancel",
                backdropClick

            );

        if (confirm == true)
        {
            timer.Stop();
            await localStorage.RemoveItemAsync("IdExam");
            await localStorage.RemoveItemAsync("IdExamDetail");
            await localStorage.RemoveItemAsync("_lstQAndASelect");
            await localStorage.RemoveItemAsync("_tabCount");
            localStorage.RemoveItemAsync("countdownTime");
            navigation.NavigateTo("/Student/Home");
        }
    }
}

@* <script>
    window.initVisibilityChangeHandler = function (dotNetHelper) {
        document.addEventListener('visibilitychange', function () {
            if (document.hidden) {
                dotNetHelper.invokeMethodAsync('ShowTabOutNotification');
            }
        });
    };
</script> *@

@* <script>
    let visibilityChangeListener;

    window.initVisibilityChangeHandler = function (dotNetHelper) {
        visibilityChangeListener = function () {
            if (document.hidden) {
                dotNetHelper.invokeMethodAsync('ShowTabOutNotification');
            }
        };
        document.addEventListener('visibilitychange', visibilityChangeListener);
    };

    window.removeVisibilityChangeHandler = function () {
        if (visibilityChangeListener) {
            document.removeEventListener('visibilitychange', visibilityChangeListener);
        }
    };
</script> *@

<script>
    let visibilityChangeListener;
    let blurListener;

    // Hàm khởi tạo các sự kiện focus, blur và visibilitychange
    window.initVisibilityChangeHandler = function (dotNetHelper) {
        // Lắng nghe sự kiện visibilitychange (khi người dùng chuyển tab)
        visibilityChangeListener = function () {
            if (document.hidden) {
                dotNetHelper.invokeMethodAsync('ShowTabOutNotification'); // Gọi phương thức Blazor khi trang bị ẩn
            }
        };

        // Lắng nghe sự kiện blur (khi cửa sổ bị mất focus)
        blurListener = function () {
            dotNetHelper.invokeMethodAsync('ShowTabOutNotification'); // Gọi phương thức Blazor khi mất focus
        };

        document.addEventListener('visibilitychange', visibilityChangeListener);
        window.addEventListener('blur', blurListener);
    };

    window.removeVisibilityChangeHandler = function () {
        if (visibilityChangeListener) {
            document.removeEventListener('visibilitychange', visibilityChangeListener);
        }
        if (blurListener) {
            window.removeEventListener('blur', blurListener);
        }
    };
</script>
