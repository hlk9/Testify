@page "/ViewExam"
@using System.Text.Json
@using Testify.DAL.ViewModels
@using Testify.Web.Data.Commons
@inject IJSRuntime JS
<style>
    .hidden-scroll {
        overflow-y: scroll;
        scrollbar-width: none;
    }

        .hidden-scroll::-webkit-scrollbar {
            display: none;
        }

</style>

<MudDrawer @bind-Open="@_open" Width="30%" ClipMode="DrawerClipMode.Never" Elevation="3" Anchor="Anchor.End" Variant="@DrawerVariant.Responsive">
    <MudDrawerHeader Class="align-items-center">
        <MudText Class="fs-6">Thí sinh: <b>Nguyễn Văn Thị Lò A</b></MudText>
    </MudDrawerHeader>
    <MudPaper Elevation="0" Class="w-100 pt-5 px-4 h-100 position-relative">
        <MudText Class="fs-5 fw-bold text-center text-uppercase">@exam.Name</MudText>
        <MudPaper Elevation="0" Class="w-100 d-flex justify-content-center gap-3 flex-wrap py-5 hidden-scroll" Style="min-height: 400px; max-height: 400px; overflow: scroll">
            @if (_lstQuestionWithAnswers != null)
            {
                @foreach (var a in _lstQuestionWithAnswers)
                {
                    sttList = 1;
                    bool isSelect = _lstQAndASelect.Any(x => x.QuestionId == a.Id);
                    if (isSelect)
                    {
                        <MudButton Style="background-color: #29a69a; color: #fff; width: 50px; height: 50px;">@(sttList++)</MudButton>
                    }
                    else
                    {
                        <MudButton Style="color: #000; width: 50px; height: 50px; border: 1px solid rgba(0, 0, 0, 0.2)">@(sttList++)</MudButton>
                    }
                }
            }
        </MudPaper>
        <MudPaper Elevation="0" Class="position-absolute bottom-0 start-0 end-0">
            <MudGrid Class="p-0 m-0 w-100">
                <MudItem xl="6" lg="6" md="12" sm="12" xs="12" Class="px-2 py-lg-3 py-0">
                    <MudButton Class="w-100" Style="border: 1px solid #29a69a; color: #29a69a" OnClick="Cancle">Rời khỏi</MudButton>
                </MudItem>
                <MudItem xl="6" lg="6" md="12" sm="12" xs="12" Class="px-2 py-lg-3 py-2">
                    <MudButton Class="w-100 text-white" Style="background-color: #29a69a" OnClick="OnSubmit">Nộp bài</MudButton>
                </MudItem>
            </MudGrid>
        </MudPaper>
    </MudPaper>
</MudDrawer>
<MudMainContent>
    <MudAppBar Elevation="2">
        <MudText>Thời gian còn lại: <b>@timeRemaining</b></MudText>
        <MudSpacer />
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Class="d-lg-none d-block" Edge="Edge.End" OnClick="@ToggleDrawer" />
    </MudAppBar>
    <MudPaper Elevation="0" Class="p-4">
        @if (_lstQuestionWithAnswers != null)
        {
            foreach (var q in _lstQuestionWithAnswers)
            {
                stt = 1;
                <MudPaper Elevation="0" Class="w-100 mb-5">
                    <MudPaper Elevation="4" Class="bg-transparent w-100">
                        <MudText Class="fw-bold text-white p-4 rounded-top rounded-3" Style="background-color: #29a69a;"><b>Câu @(stt++):</b> @q.Content</MudText>
                        <MudGrid Class="pb-4 m-0 w-100">
                            @for (int i = 0; i < q.Answers.Count; i++)
                            {
                                var answer = q.Answers[i];
                                string contentAnswer = (char)('A' + i) + $". {answer.Content}";
                                bool isSelect = _lstQAndASelect.Any(x => x.QuestionId == q.Id && x.Answers.Any(y => y.Id == answer.Id));
                                int bindChecked = isSelect == true ? 1 : 0;
                                @if (q.QuestionType == Convert.ToInt32(listQuestionTypes.SingleChoice) || q.QuestionType == Convert.ToInt32(listQuestionTypes.YesNo))
                                {
                                    if (isSelect)
                                    {
                                        <MudItem xl="6" lg="6" md="6" sm="12" xs="12" Class="px-4">
                                            <MudButton Class="py-3 w-100 text-truncate text-wrap h-100"
                                                       Style="border-radius: 10px; transition: 0.3s ease; border: 1px solid rgba(0, 0, 0, 0.2); background-color: rgba(0, 0, 0, 0.2)"
                                                       OnClick="@(() => IsSelectAnswerSingle(q.Id, answer.Id))">
                                                <MudText Class="text-start w-100">@contentAnswer</MudText>
                                            </MudButton>
                                        </MudItem>
                                    }
                                    else
                                    {
                                        <MudItem xl="6" lg="6" md="6" sm="12" xs="12" Class="px-4">
                                            <MudButton Class="py-3 w-100 text-truncate text-wrap h-100"
                                                       Style="border-radius: 10px; transition: 0.3s ease; border: 1px solid rgba(0, 0, 0, 0.2)"
                                                       OnClick="@(() => IsSelectAnswerSingle(q.Id, answer.Id))">
                                                <MudText Class="text-start w-100">@contentAnswer</MudText>
                                            </MudButton>
                                        </MudItem>
                                    }
                                }
                                else
                                {
                                    <MudItem xl="6" lg="6" md="6" sm="12" xs="12" Class="px-4">
                                        <MudCheckBox T="bool" Label="@contentAnswer" @bind-Value="@isSelect" Class="py-1 text-start w-100 text-truncate text-wrap h-100"
                                                     Style="border-radius: 10px; transition: 0.3s ease; border: 1px solid rgba(0, 0, 0, 0.2)"
                                                      onclick="@(() => IsSelectAnswerMulti(q.Id, answer.Id))" ></MudCheckBox>
                                    </MudItem>
                                }
                            }
                        </MudGrid>
                    </MudPaper>
                </MudPaper>
            }
        }
    </MudPaper>
</MudMainContent>

@code {
    [Inject]
    private IDialogService _mudDialogServices { get; set; }

    private Exam exam { get; set; } = new();
    private List<ExamDetail> _lstexamDetails;
    private List<ExamDetailQuestion> _lstexamDetailsQuestion;
    private List<QuestionWithAnswer> _lstQuestionWithAnswers = new List<QuestionWithAnswer>();
    private List<QuestionAndAnswerChoosen> _lstQAndASelect = new List<QuestionAndAnswerChoosen>();
    private int timeDoExam = 0;
    private string timeRemaining = "";
    private System.Timers.Timer timer;
    private int countdownTime;
    private bool isLoading;
    private int idExam = 1;
    private int idExamDetail;
    private int stt;
    private int sttList;
    private bool _open = true;
    private HttpContext httpContext;

    private void ToggleDrawer()
    {
        _open = !_open;
    }

    // protected override async Task OnInitializedAsync()
    //
    //     CheckInput();
    //     isLoading = true;
    //     exam = await _serExam.GetExamId(idExam);
    //     countdownTime = exam.Duration * 60;
    //     await LoadExam();
    //     StartCountdown();
    // }

    protected override async Task OnInitializedAsync()
    {
        CheckInput();
        isLoading = true;
        exam = await _serExam.GetExamId(idExam);
        countdownTime = exam.Duration * 60;
        StartCountdown();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadExam();
        }
    }

    private void CheckInput()
    {
        if (idExam <= 0)
        {
            snackbar.Add("Không có bài thi nào!", Severity.Warning);
            navigation.NavigateTo("/Admin/Home");
            return;
        }
    }

    private async Task LoadExam()
    {
        Random rad = new Random();
        var idExamDetailLocalStorage = await localStorage.GetItemAsync<string>("IdExamDetail");
        
        snackbar.Add(idExamDetailLocalStorage == null ? "chưa có" : idExamDetailLocalStorage);
        if (idExamDetailLocalStorage != "" && idExamDetailLocalStorage != null)
        {
            var lstQAndASelect = JsonSerializer.Deserialize<List<QuestionAndAnswerChoosen>>(await localStorage.GetItemAsync<string>("_lstQAndASelect"));
            idExamDetail = Convert.ToInt32(idExamDetailLocalStorage);
            if (idExamDetail == null || idExamDetail <= 0)
            {
                snackbar.Add("Có lỗi", Severity.Warning);
                navigation.NavigateTo("/Admin/Home");
                return;
            }
            _lstexamDetailsQuestion = await _serExamDetailQuestion.GetAllByExamDetailId(idExamDetail);
            foreach (var item in _lstexamDetailsQuestion)
            {
                Question question = await _serQuestion.GetQuestionById(item.QuestionId);
                List<Answer> shuffledAnswer = (await _serAnswer.GetAllByQuestionId(item.QuestionId)).OrderBy(x => rad.Next()).ToList();
                QuestionWithAnswer questionWithAnswer = new QuestionWithAnswer()
                    {
                        Id = question.Id,
                        Content = question.Content,
                        QuestionType = question.QuestionTypeId,
                        Answers = shuffledAnswer
                    };

                _lstQuestionWithAnswers.Add(questionWithAnswer);
            }
            _lstQAndASelect = lstQAndASelect;
            return;
        }

        _lstexamDetails = await _serExamDetail.GetExamDetailByExamId(idExam);
        if (_lstexamDetails == null || _lstexamDetails.Count == 0)
        {
            snackbar.Add("Lỗi bài thi", Severity.Warning);
            navigation.NavigateTo("/Admin/Home");
            return;
        }

        var indexExamdetail = rad.Next(_lstexamDetails.Count);
        idExamDetail = _lstexamDetails[indexExamdetail].Id;
        if (idExamDetail == null || idExamDetail <= 0)
        {
            snackbar.Add("Có lỗi", Severity.Warning);
            navigation.NavigateTo("/Admin/Home");
            return;
        }
        _lstexamDetailsQuestion = await _serExamDetailQuestion.GetAllByExamDetailId(idExamDetail);
        foreach (var item in _lstexamDetailsQuestion)
        {
            Question question = await _serQuestion.GetQuestionById(item.QuestionId);
            List<Answer> shuffledAnswer = (await _serAnswer.GetAllByQuestionId(item.QuestionId)).OrderBy(x => rad.Next()).ToList();
            QuestionWithAnswer questionWithAnswer = new QuestionWithAnswer()
                {
                    Id = question.Id,
                    Content = question.Content,
                    QuestionType = question.QuestionTypeId,
                    Answers = shuffledAnswer
                };

            _lstQuestionWithAnswers.Add(questionWithAnswer);
        }
        await localStorage.SetItemAsync("IdExam", idExam);
        await localStorage.SetItemAsync("IdExamDetail", idExamDetail);

    }

    private async Task IsSelectAnswerSingle(int questionId, int answerId)
    {
        List<Answer> lstAnswers = new List<Answer>();
        var objanswer = await _serAnswer.GetById(answerId);
        lstAnswers.Add(objanswer);
        var objQuestionAndAnswer = _lstQAndASelect.FirstOrDefault(x => x.QuestionId == questionId);
        if (objQuestionAndAnswer != null)
        {
            objQuestionAndAnswer.Answers = lstAnswers;
            await localStorage.SetItemAsync("_lstQAndASelect", _lstQAndASelect);
        }
        else
        {
            _lstQAndASelect.Add(new QuestionAndAnswerChoosen { QuestionId = questionId, Answers = lstAnswers });
            await localStorage.SetItemAsync("_lstQAndASelect", _lstQAndASelect);
        }
    }

    private async Task IsSelectAnswerMulti(int questionId, int answerId)
    {
        List<Answer> lstAnswers = new List<Answer>();
        var objanswer = await _serAnswer.GetById(answerId);
        lstAnswers.Add(objanswer);
        var objQuestionAndAnswer = _lstQAndASelect.FirstOrDefault(x => x.QuestionId == questionId);
        if (objQuestionAndAnswer != null)
        {
            if (objQuestionAndAnswer.Answers.Any(x => x.Id == answerId) && objQuestionAndAnswer.Answers.Count > 1)
            {
                objQuestionAndAnswer.Answers.RemoveAll(x => x.Id == answerId);
                await localStorage.SetItemAsync("_lstQAndASelect", _lstQAndASelect);
            }
            else if (objQuestionAndAnswer.Answers.Any(x => x.Id == answerId) && objQuestionAndAnswer.Answers.Count == 1)
            {
                _lstQAndASelect.RemoveAll(x => x.QuestionId == questionId);
                await localStorage.SetItemAsync("_lstQAndASelect", _lstQAndASelect);
            }
            else
            {
                objQuestionAndAnswer.Answers.Add(objanswer);
                await localStorage.SetItemAsync("_lstQAndASelect", _lstQAndASelect);
            }

        }
        else
        {
            _lstQAndASelect.Add(new QuestionAndAnswerChoosen { QuestionId = questionId, Answers = lstAnswers });
            await localStorage.SetItemAsync("_lstQAndASelect", _lstQAndASelect);
        }
    }

    private async Task ScoreExam()
    {
        Submission submission = new Submission();
        double score = 0;
        bool isPassed = false;
        int answered = 0;
        foreach (var q in _lstQAndASelect)
        {
            answered++;
            AnswerAndQuestion QnA = await _serQuestion.GetTrueAnswerOfQuesiton(q.QuestionId, idExamDetail);

            if (q.Answers.Count() == 1)
            {
                foreach (var a in q.Answers)
                {
                    if (a.IsCorrect == true)
                    {
                        score += QnA.PointOfQuestion;
                    }
                }
            }
            else
            {
                bool allAnswerTrue = (q.Answers.Where(x => x.IsCorrect == true).Count() == QnA.LstAnswer.Count() && q.Answers.Count() == QnA.LstAnswer.Count());
                if (allAnswerTrue)
                {
                    score += QnA.PointOfQuestion;
                }
            }
        }

        int unAswered = exam.NumberOfQuestions - answered;

        if (score >= exam.PassMark)
        {
            isPassed = true;
        }
        else
        {
            isPassed = false;
        }

        var userId = await ProtectedSessionStore.GetAsync<string>("userLogin");

        submission.UserId = Guid.Parse(userId.Value);
        submission.ExamDetailId = idExamDetail;
        submission.ExamScheduleId = 1;
        submission.SubmitTime = DateTime.Now;
        submission.TimeTaken = TimeSpan.FromSeconds(timeDoExam);
        submission.TotalMark = Math.Round(score, 2);
        submission.IsPassed = isPassed;
        submission.UnAnswered = unAswered;
        submission.Answered = answered;
        submission.Note = isPassed == true ? "Đạt" : "Không đạt";
        submission.Status = true;

        var objSub = await _serSubmission.CreateSubmission(submission);
        if (objSub != null)
        {
            AnswerSubmission AnS = new AnswerSubmission();

            foreach (var item in _lstQAndASelect)
            {
                AnS.SubmissionId = objSub.Id;
                AnS.QuestionId = item.QuestionId;
                foreach (var a in item.Answers)
                {
                    AnS.AnswerId = a.Id;
                    await _serAnS.CreateAnswerSubmission(AnS);
                }
            }
            snackbar.Add("Nộp bài thành công", Severity.Success);
        }
        else
        {
            snackbar.Add("Nộp bài thất bại", Severity.Error);
        }
    }

    private async Task OnSubmit()
    {
        DialogOptions backdropClick = new() { BackdropClick = false };

        var confirm = await _mudDialogServices.ShowMessageBox
            (
                "Thông báo",
                "Bạn chắc chắn muốn nộp bài thi?",
                "Xác nhận",
                null,
                cancelText: "Cancel",
                backdropClick

            );

        if (confirm == true)
        {
            await ScoreExam();
        }
    }

    private void StartCountdown()
    {
        timer = new System.Timers.Timer(1000);
        timer.Elapsed += OnTimedEvent;
        timer.AutoReset = true;
        timer.Enabled = true;
    }

    private void FormatTime()
    {
        TimeSpan ts = TimeSpan.FromSeconds(countdownTime);

        if (ts.TotalMinutes <= 60)
        {
            timeRemaining = $"{ts.Minutes:D2}:{ts.Seconds:D2}";
        }
        else
        {
            timeRemaining = $"{ts.Hours:D2}:{ts.Minutes:D2}:{ts.Seconds:D2}";
        }
    }

    private void OnTimedEvent(Object source, System.Timers.ElapsedEventArgs e)
    {
        countdownTime--;
        timeDoExam++;

        if (countdownTime <= 0)
        {
            timer.Stop();
        }

        FormatTime();
        InvokeAsync(StateHasChanged);
    }

    private async Task Cancle()
    {
        await localStorage.RemoveItemAsync("IdExam");
        await localStorage.RemoveItemAsync("IdExamDetail");
        await localStorage.RemoveItemAsync("_lstQAndASelect");
        navigation.NavigateTo("/Admin/Home");
    }
}