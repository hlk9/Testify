@page "/Examiner/ExamManagement"
@using Testify.API.DTOs
@layout ExaminerLayout
@inject IDialogService DialogService
@inject ExamService examService
@inject ExamDetailService examdetailService

<style>
    .add-button-end {
        background-color: #29A69A;
        color: white;
        width: 100%;
    }

        .add-button-end:hover {
            background-color: white;    
            color: #29a69a;
        }

</style>

<div style="font-family:Roboto; padding: 30px; height:calc(100svh - 64px); background-color:#fafafa">
    <MudPaper Style="padding:15px;">
        <MudText Class="fw-bold" Style="font-size:22px; color:#29A69A">BÀI THI</MudText>
    </MudPaper>
    <MudGrid Style="padding:20px 0 ">
        <MudItem xl="10" lg="9" md="8" sm="7" xs="12">
        </MudItem>
        <MudItem xl="2" lg="3" md="4" sm="5" xs="12">
            <MudButton OnClick="@(() => OpenDialogAsync(_maxWidth,"create"))" Class="add-button-end" Variant="Variant.Filled">Thêm mới</MudButton>
            
        </MudItem>
    </MudGrid>

    <div class="bg-white rounded-3" style="width:100%">

        <MudTable Items="@_lst" Dense="true" Hover="true" Virtualize="true" FixedHeader="true" HorizontalScrollbar="true" Height="calc(100svh - 384px)">

            <ToolBarContent>
                <MudGrid Style="align-items:center;padding:0px; margin:0;width:100%">
                    <MudItem xl="6" lg="6" md="6" sm="4" xs="12" Style="padding:0px; margin:0;">
                        <MudText Style="font-size: 22px; font-weight: bold;color:#29a69a">Danh sách bài thi</MudText>

                    </MudItem>
                    <MudTextField T="string" Placeholder="Search" Adornment="Adornment.Start"
                                  AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium"
                                  Class="mt-0" ValueChanged="OnSearchChanged" Immediate="true">
                    </MudTextField>
                </MudGrid>
            </ToolBarContent>
            <HeaderContent>
                <MudTh><MudTableSortLabel SortLabel="Tên bài thi" T="string"> Tên bài thi</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortLabel="Môn" T="string">Tên Môn</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortLabel="Thời gian" T="int">Thời gian làm bài</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortLabel="Số câu hỏi" T="int">Số câu hỏi</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortLabel="Số lần làm bài" T="int">Số lần làm bài</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortLabel="Trạng thái" T="string">Trạng thái</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortLabel="Thao tác" T="string">Thao tác</MudTableSortLabel></MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Tên bài thi">@context.ExamName </MudTd>
                <MudTd DataLabel="Môn">@context.SubjectName </MudTd>
                <MudTd DataLabel="Thời gian">@context.Duration </MudTd>
                <MudTd DataLabel="Số câu hỏi">@context.NumberOfQuestion </MudTd>
                <MudTd DataLabel="Số lần làm bài">@context.NumberOfRepeat </MudTd>
                <MudTd DataLabel="Trạng thái">
                    @if (context.Status == 1)
                    {
                        <span>Công khai</span>
                    }
                    else
                    {
                        <span>Chưa công khai</span>
                    }
                </MudTd>
                <MudTd DataLabel="Thao tác">
                    <MudTooltip Text="Sửa">
                        <MudIconButton OnClick="@(()=> ShowUpdateDialog(_maxWidth,context.Id))" Icon="@Icons.Material.Filled.BorderColor" aria-label="update"></MudIconButton>
                    </MudTooltip>
                    <MudTooltip Text="Chi tiết">
                        <MudIconButton OnClick="@(()=> OpenDetailAsync(_maxWidth,context.Id))" Icon="@Icons.Material.Filled.Notes" aria-label="details"></MudIconButton>
                    </MudTooltip>
                    <MudTooltip Text="Xoá">

                        <MudIconButton OnClick="@(()=> ShowDeleteDialog(_maxWidth,context.Id) )" Icon="@Icons.Material.Filled.Delete" aria-label="delete"></MudIconButton>
                    </MudTooltip>
                    <MudTooltip Text="Xem đề thi">
                            <MudButton OnClick="@(() => ShowDeThiDialog(_maxWidth,context.Id))" Class="add-button-end" Disabled="@(context.Status == 2 ? true : false)">Xem đề</MudButton>
                    </MudTooltip>
                </MudTd>
            </RowTemplate>
            <NoRecordsContent>
                <MudText>No matching records found</MudText>
            </NoRecordsContent>
            <LoadingContent>
                <MudText>Loading...</MudText>
            </LoadingContent>
            <PagerContent>
                <MudTablePager />
            </PagerContent>
        </MudTable>
    </div>


</div>
@code {
    private List<ExamWhitQusetion> _lst = new List<ExamWhitQusetion>();
    private List<ExamDetail> lisDThi = new List<ExamDetail>();
    protected override async Task OnInitializedAsync()
    {
        _lst = (await examService.GetInforBasic(null)).Where(x => x.Status == 1 || x.Status == 2).ToList();
    }
    
    [Inject] ISnackbar Snackbar { get; set; }
    private readonly DialogOptions _maxWidth = new() { MaxWidth = MaxWidth.Large, FullWidth = true };

    private async Task OnSearchChanged(string searchText)
    {
        _lst = (await examService.GetInforBasic(searchText)).Where(x => x.Status == 1 || x.Status == 2).ToList();
        StateHasChanged();
    }

    private async Task<bool> CheckAllowdelete()
    {
        var userId = await ProtectedSessionStore.GetAsync<string>("userLogin");
        if (!userId.Success || userId.Value == null)
        {
            return false;
        }
        else
        {
            var u = await _serUser.GetByidUser(Guid.Parse(userId.Value));
            if (u.LevelId != 1 || u.LevelId != 2)
                return false;
        }

        return true;
    }

    private async Task ShowDeleteDialog(DialogOptions options, int Id)
    {
        if (! await CheckAllowdelete())
        {
            await JS.InvokeVoidAsync("alert", "Bạn không có quyền xóa, hãy liên hệ cấp trên");
            return;
        }
        var parameters = new DialogParameters
        {
              { "Id", Id }
        };
        var dialog = await DialogService.ShowAsync<Dialog.Exam.DeleteExam>("Options Dialog", parameters, options);
        var result = await dialog.Result;
        if (result == null || !result.Canceled)
        {
            _lst = await examService.GetInforBasic(null);
        }
    }

    private async Task OpenDetailAsync(DialogOptions options, int Id)
    {
        var parameters = new DialogParameters
        {
              { "Id", Id }
        };
        var dialog = await DialogService.ShowAsync<Dialog.Exam.DetailExam>("Options Dialog", parameters, options);
        var result = await dialog.Result;
        if (result == null || !result.Canceled)
        {
            _lst = await examService.GetInforBasic(null);
        }
    }

    private async Task ShowUpdateDialog(DialogOptions options, int Id)
    {
        var parameters = new DialogParameters
        {
              { "Id", Id }
        };
        var dialog = await DialogService.ShowAsync<Dialog.Exam.UpdateExam>("Options Dialog", parameters, options);
        var result = await dialog.Result;
        if (result == null || !result.Canceled)
        {
            _lst = await examService.GetInforBasic(null);
        }

        StateHasChanged();
    }

    private async Task OpenDialogAsync(DialogOptions options, string name)
    {

        if (name.Equals("create"))
        {
            var dialog = await DialogService.ShowAsync<Dialog.Exam.CreateExam>("Options Dialog", options);
            var result = await dialog.Result;
            if (!result.Canceled)
            {
                _lst = await examService.GetInforBasic(null);
            }

        }
        else if (name.Equals("update"))
        {
            DialogService.ShowAsync<Dialog.Exam.UpdateExam>("Options Dialog", options);
        }
        else if (name.Equals("details"))
        {
            DialogService.ShowAsync<Dialog.Exam.DetailExam>("Options Dialog", options);
        }
        else
        {
            DialogService.ShowAsync<Dialog.Exam.DeleteExam>("Options Dialog", options);
        }
        StateHasChanged();

    }

    private async Task ShowDeThiDialog(DialogOptions options, int Id)
    {
        var parameters = new DialogParameters
        {
              { "Id", Id }
        };

        lisDThi = await examdetailService.GetExamDetailByExamId(Id);
        if (lisDThi.Count > 0)
        {
            var dialog = await DialogService.ShowAsync<Dialog.DeThi.ListDeThi>("Options Dialog", parameters, options);
            var result = await dialog.Result;
            if (result == null || !result.Canceled)
            {
                _lst = await examService.GetInforBasic(null);
            }
            else
            {

            }
        }
        else
        {
            Snackbar.Add("Bài thi chưa có đề nào!", Severity.Warning);
        }

    }

}
