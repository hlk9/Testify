@using Testify.DAL.Models
@using Testify.Web.utils
<div style="border-top: 1px solid #ccc">
    <MudForm Model="@answer" IsValid="isValid" @ref="form">
        <div class="d-flex justify-content-between align-items-center">
            <MudCheckBox T="bool" @bind-Value="@answer.IsCorrect" Label="Đáp án đúng" />
            <MudIconButton Icon="@Icons.Material.Outlined.DeleteOutline" OnClick="RemoveForm" Disabled="IsDisableRemove"></MudIconButton>
        </div>

        <MudTextField @bind-Value="@answer.Content" Label="Nội dung câu hỏi" Required="true" RequiredError="Không được để trống!" Immediate="true" Validation="@((string v) => string.IsNullOrWhiteSpace(v) ? "Không được để trống!" : null)" />
    </MudForm>
</div>

@code {
    [Parameter]
    public Answer answer { get; set; } = new();

    [Parameter]
    public int questionTypeId { get; set; }

    [Parameter]
    public EventCallback<Answer> OnRemove { get; set; }

    private bool isValid;
    private bool IsDisableRemove;
    MudForm form;

    private void checkQuestionType()
    {
        if (questionTypeId == Convert.ToInt32(listQuestionTypes.YesNo))
        {
            IsDisableRemove = true;
            return;
        }
        IsDisableRemove = false;
    }

    protected override async Task OnInitializedAsync()
    {
        checkQuestionType();
    }

    [Parameter]
    public EventCallback<Answer> OnAnswerChanged { get; set; }

    private async void RemoveForm()
    {
        if (OnRemove.HasDelegate)
        {
            await OnRemove.InvokeAsync(answer);
        }
    }

    public async Task<bool> ValidateAsync()
    {
        await form.Validate();
        return form.IsValid;
    }
}