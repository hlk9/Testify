 @page "/Examiner/SubjectManagement"
@using Testify.DAL.Models
@using Testify.Web.Data.Commons
@using Testify.Web.Shared
@layout ExaminerLayout
@inject IDialogService DialogService
<style>

    .add-button-end {
        background-color: #29A69A;
        color: white;
        width: 100%;
    }

        .add-button-end:hover {
            background-color: white;
            color: #29a69a;
        }

</style>


<div style="font-family:Roboto; padding: 30px; height:calc(100svh - 64px); background-color:#fafafa">
    <MudPaper Style="padding:15px;">
        <MudText Class="fw-bold" Style="font-size:22px; color:#29A69A">MÔN HỌC</MudText>
    </MudPaper>
    <MudGrid Style="padding:20px 0 ">
        <MudItem xl="10" lg="9" md="8" sm="7" xs="12">

        </MudItem>
        <MudItem xl="2" lg="3" md="4" sm="5" xs="12">
            <MudButton OnClick="@(() => OpenDialogAsync(_maxWidth,OpenDialogType.Create ,-1))" Class="add-button-end" Variant="Variant.Filled">Thêm mới</MudButton>
        </MudItem>
    </MudGrid>

    <div class="bg-white rounded-3" style="width:100%;">
        @if (isLoading)
        {
            <LoadingContext />
        }
        else
        {
            <MudTable Items="@subject" Dense="true" Hover="true" Virtualize="true" FixedHeader="true" HorizontalScrollbar="true" Height="calc(100svh - 384px)">

                <ToolBarContent>
                    <MudGrid Style="align-items:center;padding:0px; margin:0;width:100%">
                        <MudItem xl="6" lg="6" md="6" sm="4" xs="12" Style="padding:0px; margin:0;">
                            <MudText Style="font-size: 22px; font-weight: bold;color:#29a69a">Danh sách môn học</MudText>

                        </MudItem>
                        <MudItem xl="6" lg="6" md="6" sm="8" xs="12" Style="padding:0px; margin:0;">
                            <MudTextField T="string" Placeholder="Search" Adornment="Adornment.Start" @bind-Value="searchValue"
                                          AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0" TextChanged="onChangeSearch" Immediate=true></MudTextField>
                        </MudItem>
                    </MudGrid>

                </ToolBarContent>
                <HeaderContent>
                    <MudTh><MudTableSortLabel SortLabel="Tên môn học" T="string">Tên môn học</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortLabel="Mô tả" T="string">Mô tả</MudTableSortLabel></MudTh>
                    <MudTh Style="text-align:center"><MudTableSortLabel SortLabel="Thao tác" T="string">Thao tác</MudTableSortLabel></MudTh>
                </HeaderContent>

                <RowTemplate>
                    <MudTd DataLabel="Tên môn học">@context.Name</MudTd>
                    <MudTd DataLabel="Mô tả">@context.Description</MudTd>
                    <MudTd Class="py-3 text-center" DataLabel="Thao tác">
                        <MudIconButton OnClick="@(()=> OpenDialogAsync(_maxWidth,OpenDialogType.Update, context.Id))" Icon="@Icons.Material.Filled.BorderColor" aria-label="update"></MudIconButton>
                        <MudIconButton OnClick="@(()=> OpenDialogAsync(_maxWidth,OpenDialogType.Detail, context.Id))" Icon="@Icons.Material.Filled.Notes" aria-label="details"></MudIconButton>
                        <MudIconButton OnClick="@(()=> OpenDialogAsync(_maxWidth,OpenDialogType.Delete, context.Id))" Icon="@Icons.Material.Filled.Delete" aria-label="delete"></MudIconButton>
                    </MudTd>
                </RowTemplate>
                <NoRecordsContent>
                    <MudText></MudText>
                </NoRecordsContent>
                <LoadingContent>
                    <MudText>Đang tải...</MudText>
                </LoadingContent>
                <PagerContent>
                    <MudTablePager />
                </PagerContent>
            </MudTable>
        }
    </div>
</div>

@code {
    private List<Subject> subject = new();
    private string searchValue = "";
    private bool isLoading { get; set; } = true;

    private async Task onChangeSearch()
    {

        await LoadData(searchValue);

    }

    private async Task LoadData(string? textSearch)
    {
        subject = await _serSub.GetAllSub(textSearch, true);
        isLoading = false;
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadData("");
    }
    private async Task<bool> CheckAllowdelete()
    {
        var userId = await ProtectedSessionStore.GetAsync<string>("userLogin");
        if (!userId.Success || userId.Value == null)
        {
            return false;
        }
        else
        {
            var u = await _serUser.GetByidUser(Guid.Parse(userId.Value));
            if (u.LevelId != 1 || u.LevelId != 2)
                return false;
        }

        return true;
    }

    [Parameter]
    public int idSubject { get; set; }

    private readonly DialogOptions _maxWidth = new() { MaxWidth = MaxWidth.Small, FullWidth = true };

    private async Task OpenDialogAsync(DialogOptions options, string name, int id)
    {
        var dialogParametersUpdate = new DialogParameters<Dialog.Subject.UpdateSubjectDialog>
        {
            {x => x.idSubject, id}
        };

        var dialogParametersDel = new DialogParameters<Dialog.Subject.DeleteSubjectDialog>
        {
            {x => x.idSubject, id}
        };

        var dialogParametersQuestionId = new DialogParameters<Dialog.Subject.DetailsSubjectDialog>
        {
            {x => x.idSubject, id}
        };


        if (name.Equals(OpenDialogType.Create))
        {
            var dialog = await DialogService.ShowAsync<Dialog.Subject.CreateSubjectDialog>("Options Dialog", options);
            var result = await dialog.Result;

            if (!result.Canceled)
            {
                await LoadData("");
            }

        }
        else if (name.Equals(OpenDialogType.Update))
        {
            var dialog = await DialogService.ShowAsync<Dialog.Subject.UpdateSubjectDialog>("Options Dialog", dialogParametersUpdate, options);
            var result = await dialog.Result;
            if (!result.Canceled)
            {
                await LoadData("");
            }

        }
        else if (name.Equals(OpenDialogType.Detail))
        {
            var dialog = await DialogService.ShowAsync<Dialog.Subject.DetailsSubjectDialog>("Options Dialog", dialogParametersQuestionId, options);
            var result = await dialog.Result;
            if (!result.Canceled)
            {
                await LoadData("");
            }
        }
        else
        {
            if (!await CheckAllowdelete())
            {
                await JS.InvokeVoidAsync("alert", "Bạn không có quyền xóa, hãy liên hệ cấp trên");
                return;
            }
            var dialog = await DialogService.ShowAsync<Dialog.Subject.DeleteSubjectDialog>("Options Dialog", dialogParametersDel, options);
            var result = await dialog.Result;
            if (!result.Canceled)
            {
                await LoadData("");
            }

        }
    }
}
