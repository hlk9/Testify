 @page "/Examiner/AccountManagement" 
@using Testify.DAL.Models
@using Testify.Web.Data.Commons
@layout ExaminerLayout
@inject IDialogService DialogService
<style>

    .add-button-end {
        background-color: #29A69A;
        color: white;
        width: 100%;
    }

        .add-button-end:hover {
            background-color: white;
            color: #29a69a;
        }

    .button-import {
        background-color: red;
        color: #fff;
        width: 100%;
    }

        .button-import:hover {
            background-color: transparent;
            color: red;
            width: 100%;
        }
</style>
<div style="font-family:Roboto; padding: 30px; height:calc(100svh - 64px); background-color:#fafafa">
    <MudPaper Style="padding:15px;">
        <MudText Class="fw-bold" Style="font-size:22px; color:#29A69A">TÀI KHOẢN</MudText>
    </MudPaper>
    <MudGrid Style="padding: 20px 0; align-items: center">
        <MudItem xl="4" lg="4" md="4" sm="12" xs="12">
            <MudSelect T="int" @bind-Value="levelId" Label="Vui lòng chọn chức vụ" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter" SelectedValuesChanged="ChangeValueLevel">
                <MudSelectItem Value="-1">Tất cả</MudSelectItem>
                @foreach (var item in _lstLevel)
                {
                    <MudSelectItem Value="@item.Id">@item.Name</MudSelectItem>
                }
            </MudSelect>
        </MudItem >
        <MudItem xl="4" lg="4" md="4" sm="12" xs="12">
            <MudButton Class="bg-info text-white w-100" Variant="Variant.Filled" OnClick="@(() => OpenDialogAsync(_maxWidth, OpenDialogType.ExportExcel, Guid.Empty))">Export</MudButton>
        </MudItem>

        <MudItem xl="4" lg="4" md="4" sm="12" xs="12">
            <MudButton OnClick="@(() => OpenDialogAsync(_maxWidth , OpenDialogType.Create, Guid.Empty ))" Class="add-button-end" Variant="Variant.Filled">Thêm mới</MudButton>
        </MudItem>
    </MudGrid>

    <div class="bg-white rounded-3" style="width:100%">

        <MudTable Items="@_userList" Dense="true" Hover="true" Virtualize="true" FixedHeader="true" HorizontalScrollbar="true" Height="calc(100svh - 410px)">

            <ToolBarContent>
                <MudGrid Style="align-items:center;padding:0px; margin:0;width:100%">
                    <MudItem xl="6" lg="6" md="6" sm="4" xs="12" Style="padding:0px; margin:0;">
                        <MudText Style="font-size: 22px; font-weight: bold;color:#29a69a">Danh sách tài khoản</MudText>

                    </MudItem>
                    <MudItem xl="6" lg="6" md="6" sm="8" xs="12" Style="padding:0px; margin:0;">
                        <MudTextField T="string" Placeholder="Search" Adornment="Adornment.Start" @bind-Value="searchValue"
                                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0" TextChanged="onChangeSearch" Immediate=true></MudTextField>
                    </MudItem>
                </MudGrid>

            </ToolBarContent>
            <HeaderContent>
                <MudTh><MudTableSortLabel SortLabel="Họ và tên" T="string" >Họ và tên</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortLabel="Ngày sinh" T="DateOnly">Ngày sinh</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortLabel="Số điện thoại" T="string">Số điện thoại</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortLabel="Số điện thoại" T="string">Giới tính</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortLabel="Trạng thái" T="string">Trạng thái</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortLabel="Thao tác" T="string">Thao tác</MudTableSortLabel></MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Họ và tên">@context.FullName</MudTd>
                <MudTd DataLabel="Ngày sinh">@context.DateOfBirth.ToString("dd/MM/yyyy")</MudTd>
                <MudTd DataLabel="Số điện thoại">@context.PhoneNumber</MudTd>
                <MudTd DataLabel="Giới tính">
                    @if (@context.Sex == true)
                    {
                        <span>Nam</span>
                    }
                    else
                    {
                        <span>Nữ</span>
                    }
                </MudTd>
                <MudTd DataLabel="Trạng thái">
                    @if (@context.Status == Convert.ToByte(StatusType.isActive))
                    {
                        <span>Hoạt động</span>
                    }
                    else
                    {
                        <span>Không hoạt động</span>
                    }
                </MudTd>
                <MudTd Style="marign:3px" DataLabel="Thao tác">
                    <MudIconButton OnClick="@(()=> OpenDialogAsync(_maxWidth,OpenDialogType.Update, context.Id))" Icon="@Icons.Material.Filled.BorderColor" aria-label="update"></MudIconButton>
                    <MudIconButton OnClick="@(()=> OpenDialogAsync(_maxWidth,OpenDialogType.Detail, context.Id))" Icon="@Icons.Material.Filled.Notes" aria-label="details"></MudIconButton>
                    <MudIconButton OnClick="@(()=> OpenDialogAsync(_maxWidth,OpenDialogType.Delete, context.Id))" Icon="@Icons.Material.Filled.Delete" aria-label="delete"></MudIconButton>
                </MudTd>
            </RowTemplate>

            <NoRecordsContent>
                <MudText></MudText>
            </NoRecordsContent>
            <LoadingContent>
                <MudText>Đang tải...</MudText>
            </LoadingContent>
            <PagerContent>
                <MudTablePager />
            </PagerContent>
        </MudTable>
    </div>
</div>
@code {
    private string searchValue = "";
    private bool isLoading { get; set; } = true;
    private List<User> _userList = new List<User>();
    private string? textSearch;
    private int levelId =-1;
    private List<Level> _lstLevel = new List<Level>();

    [Parameter]
    public Guid idUser { get; set; }

    private User user { get; set; }

    private async Task onChangeSearch()
    {
        await LoadData(searchValue);
    }

    private async Task LoadData(string? textSearch)
    {
        _lstLevel = await _serLevel.GetAllLevel();
        _userList = await _serLevel.GetAllUserByLevelId(levelId, textSearch);
        isLoading = false;
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadData("");
    }

    private async Task ChangeValueLevel()
    {
        _userList = await _serLevel.GetAllUserByLevelId(levelId, textSearch);
    }


    private readonly DialogOptions _maxWidth = new() { MaxWidth = MaxWidth.Medium, FullWidth = true };

    private async Task OpenDialogAsync(DialogOptions options, string name, Guid id)
    {

        var dialogParametersUpdate = new DialogParameters<Dialog.Account.UpdateAccountManagement>
        {
            {x => x.UserId, id}
        };

        var dialogParametersDel = new DialogParameters<Dialog.Account.DeleteAccountManagement>
        {
            {x => x.UserId, id}
        };

        var dialogParametersUserId = new DialogParameters<Dialog.Account.DetailsAccountManagement>
        {
            {x => x.UserId, id}
        };

        var dialogParametersUser = new DialogParameters<Dialog.Account.ExportExcelDialog>
        {
            {x => x.UserId, id}
        };

        if (name.Equals(OpenDialogType.Create))
        {
            var dialog = await DialogService.ShowAsync<Dialog.Account.CreateAccountDialog>("Options Dialog", options);
            var result = await dialog.Result;
            if (!result.Canceled)
            {
                await LoadData("");
            }

        }
        else if (name.Equals(OpenDialogType.Update))
        {
            var dialog = await DialogService.ShowAsync<Dialog.Account.UpdateAccountManagement>("Options Dialog", dialogParametersUpdate, options);
            var result = await dialog.Result;
            if (!result.Canceled)
            {
                await LoadData("");
            }
        }
        else if (name.Equals(OpenDialogType.Detail))
        {
            var dialog = await DialogService.ShowAsync<Dialog.Account.DetailsAccountManagement>("Options Dialog", dialogParametersUserId, options);
            var result = await dialog.Result;
            if (!result.Canceled)
            {
                await LoadData("");
            }
        }
        else if (name.Equals(OpenDialogType.ExportExcel))
        {
            var dialog = await DialogService.ShowAsync<Dialog.Account.ExportExcelDialog>("Options Dialog", dialogParametersUser, options);
            var result = await dialog.Result;
            if(!result.Canceled)
            {
                await LoadData("");
            }
        }
        else
        {
            var dialog = await DialogService.ShowAsync<Dialog.Account.DeleteAccountManagement>("Options Dialog", dialogParametersDel, options);
            var result = await dialog.Result;
            if (!result.Canceled)
            {
                await LoadData("");
            }
        }
    }
}
<script>
    function downloadFile(fileName, contentType, content) {
        const blob = new Blob([content], { type: contentType });
        const link = document.createElement('a');
        link.href = URL.createObjectURL(blob);
        link.download = fileName;
        link.click();
        URL.revokeObjectURL(link.href);
    }
</script>
        