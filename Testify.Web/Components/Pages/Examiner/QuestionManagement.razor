@page "/Examiner/QuestionManagement"
@using Testify.DAL.Models
@layout AdminLayout
@inject IDialogService DialogService

<style>
    .input-search-end {
        color: #8e8e8e;
        padding-left: 15px;
    }

    .add-button-end {
        background-color: #29A69A;
        color: white;
        width: 100%;
    }

        .add-button-end:hover {
            background-color: white;
            color: #29a69a;
        }

    .icon-input-search {
        padding-left: 100px;
    }
</style>

<div style="font-family:Roboto; padding:30px; background-color:#fafafa">
    <MudPaper Style="padding:15px;">
        <MudText Class="fw-bold" Style="font-size:22px; color:#29A69A">CÂU HỎI</MudText>
    </MudPaper>
    <MudGrid Style="padding:20px 0 ">
        <MudItem xl="10" lg="9" md="8" sm="7" xs="12">

        </MudItem>
        <MudItem xl="2" lg="3" md="4" sm="5" xs="12">
            <MudButton OnClick="@(() => OpenDialogAsync(_maxWidth,"create", -1))" Class="add-button-end" Variant="Variant.Filled">Thêm mới</MudButton>
        </MudItem>
    </MudGrid>

    <div class="bg-white rounded-3 mb-4" style="width:100%;">
        <MudTable Items="@_lstQuestions" Dense="true" Virtualize="true" FixedHeader="true" HorizontalScrollbar="true" Height="500px">

            <ToolBarContent>
                <MudGrid Style="align-items:center;padding:0px; margin:0;width:100%">
                    <MudItem xl="6" lg="6" md="6" sm="4" xs="12" Style="padding:0px; margin:0;">
                        <MudText Style="font-size: 22px; font-weight: bold;color:#29a69a">Danh sách câu hỏi</MudText>

                    </MudItem>
                    <MudItem xl="6" lg="6" md="6" sm="8" xs="12" Style="padding:0px; margin:0;">
                        <MudTextField T="string" Placeholder="Search" Adornment="Adornment.Start"
                                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                    </MudItem>
                </MudGrid>

            </ToolBarContent>
            <HeaderContent>
                    <MudTh hidden><MudTableSortLabel SortLabel="Id câu hỏi" T="string" hidden>Id câu hỏi</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortLabel="Tên câu hỏi" T="string">Tên câu hỏi</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortLabel="Ngày tạo" T="string">Ngày tạo</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortLabel="Mức độ" T="string">Mức độ</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortLabel="Loại câu hỏi" T="string">Loại câu hỏi</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortLabel="Thuộc môn" T="string">Thuộc môn</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortLabel="Trạng thái" T="string">Trạng thái</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortLabel="Thao tác" T="string">Thao tác</MudTableSortLabel></MudTh>
            </HeaderContent>
            <RowTemplate>
                    <MudTd DataLabel="Id câu hỏi" hidden>@context.Id</MudTd>
                    <MudTd DataLabel="Tên câu hỏi">@context.Content</MudTd>
                    <MudTd DataLabel="Ngày tạo">@context.CreatedDate</MudTd>
                    <MudTd DataLabel="Mức độ">
                        @if (_lstQuestionLevels != null)
                        {
                            foreach (var item in _lstQuestionLevels)
                            {
                                if (item.Id == context.QuestionLevelId)
                                {
                                    @item.Name
                                    ;
                                    break;
                                }
                            }
                        }
                    </MudTd>
                    <MudTd DataLabel="Loại câu hỏi">
                        @if (_lstQuestionTypes != null)
                        {
                            foreach (var item in _lstQuestionTypes)
                            {
                                if (item.Id == context.QuestionTypeId)
                                {
                                    @item.Name
                                    ;
                                    break;
                                }
                            }
                        }
                    </MudTd>
                    <MudTd DataLabel="Thuộc môn">
                        @if (_lstSubjects != null)
                        {
                            foreach (var item in _lstSubjects)
                            {
                                if (item.Id == context.SubjectId)
                                {
                                    @item.Name
                                    ;
                                    break;
                                }
                            }
                        }
                    </MudTd>
                <MudTd DataLabel="Trạng thái">@(context.Status == true ? "Hoạt Động" : (context.Status == null ? "Chưa có đáp án" : "Vô hiệu hóa"))</MudTd>

                    <MudTd DataLabel="Thao tác">
                        <MudIconButton OnClick="@(()=> OpenDialogAsync(_maxWidth,"update", context.Id))" Icon="@Icons.Material.Filled.BorderColor" aria-label="update"></MudIconButton>
                        <MudIconButton OnClick="@(()=> OpenDialogAsync(_maxWidth,"", context.Id))" Icon="@Icons.Material.Filled.Delete" aria-label="delete"></MudIconButton>
                    </MudTd>
            </RowTemplate>
            <NoRecordsContent>
                <MudText>No matching records found</MudText>
            </NoRecordsContent>
            <LoadingContent>
                <MudText>Loading...</MudText>
            </LoadingContent>
            <PagerContent>
                <MudTablePager />
            </PagerContent>
        </MudTable>
    </div>
</div>

@code {
    private List<Question> _lstQuestions;
    private List<Subject> _lstSubjects;
    private List<QuestionLevel> _lstQuestionLevels;
    private List<QuestionType> _lstQuestionTypes;

    private async Task LoadData()
    {
        _lstQuestions = await _serQuestion.GetAllQuestions();
    }

    protected override async Task OnInitializedAsync()
    {

        _lstSubjects = await _serSub.GetAllSub();
        _lstQuestionLevels = await _serQuestionLevel.GetAllQuestionLevels();
        _lstQuestionTypes = await _serQuestionType.GetAllQuestionTypes();
        await LoadData();
    }

    private readonly DialogOptions _maxWidth = new() { MaxWidth = MaxWidth.Large, FullWidth = true };

    private async Task OpenDialogAsync(DialogOptions options, string name, int id)
    {
        var dialogParametersUpdate = new DialogParameters<Dialog.Question.UpdateQuestionDialog>
        {
            {x => x.QuestionId, id}
        };

        var dialogParametersDel = new DialogParameters<Dialog.Question.DeleteQuestionDialog>
        {
            {x => x.QuestionId, id}
        };

        if (name.Equals("create"))
        {
            var dialog = await DialogService.ShowAsync<Dialog.Question.CreateQuestionDialog>("Options Dialog", options);
            var result = await dialog.Result;
            if(!result.Canceled)
            {
                await LoadData();
            }

        }
        else if (name.Equals("update"))
        {
            var dialog = await DialogService.ShowAsync<Dialog.Question.UpdateQuestionDialog>("Options Dialog", dialogParametersUpdate, options);
            var result = await dialog.Result;
            if (!result.Canceled)
            {
                await LoadData();
            }
        }
        else
        {
            var dialog = await DialogService.ShowAsync<Dialog.Question.DeleteQuestionDialog>("Options Dialog", dialogParametersDel, options);
            var result = await dialog.Result;
            if (!result.Canceled)
            {
                await LoadData();
            }
        }

    }
}
