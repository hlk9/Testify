@page "/Examiner/ViewDetailExam"
@using Testify.DAL.ViewModels
@layout ExaminerLayout

@if (isLoading)
{
    <Testify.Web.Shared.LoadingContext />
}
else
{
    <div style="font-family:Roboto; padding: 30px; height:calc(100svh - 64px); background-color:#fafafa">
        <MudPaper Style="padding:15px;">
            <MudText Class="fw-bold" Style="font-size:22px; color:#29A69A">DANH SÁCH BÀI THI ĐÃ LÀM</MudText>
        </MudPaper>

        <MudGrid Style="padding:20px 0; margin:0; width:100%">
            <MudItem xl="3" lg="3" md="3" sm="6" xs="12" Style="padding:0px 10px;">
                <MudSelect T="int" Class="w-100" Label="Chọn môn" @bind-Value="@subjectId" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter" SelectedValuesChanged="SelectValueSubjectChanged">
                    <MudSelectItem Value="-1">Tất cả</MudSelectItem>
                    @foreach (var item in _lstSubject)
                    {
                        <MudSelectItem Value="@item.Id">@item.Name</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>

            <MudItem xl="3" lg="3" md="3" sm="6" xs="12" Style="padding:0px 10px;">
                <MudSelect T="int" Class="w-100" Label="Chọn lớp" @bind-Value="@classId" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter" SelectedValuesChanged="SelectValueLevelChanged">
                    <MudSelectItem Value="-1">Tất cả</MudSelectItem>
                    @foreach (var item in _lstClass)
                    {
                        <MudSelectItem Value="@item.Id">@item.Name</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>

            <MudItem xl="3" lg="3" md="3" sm="6" xs="12" Style="padding:0px 10px;">
                <MudDatePicker Label="Ngày bắt đầu" DateChanged="@selectStartChanged" Variant="Variant.Outlined" />
            </MudItem>

            <MudItem xl="3" lg="3" md="3" sm="6" xs="12" Style="padding:0px 10px;">
                <MudDatePicker Label="Ngày kết thúc" DateChanged="selectEndChanged" Variant="Variant.Outlined" />
            </MudItem>
        </MudGrid>



        <div class="bg-white rounded-3" style="width:100%">

            <MudTable Items="@_lstSubmission" Dense="true" Hover="true" Virtualize="true" FixedHeader="true" HorizontalScrollbar="true" Height="calc(100svh - 410px)">
                <ToolBarContent>
                    <MudGrid Style="align-items:center;padding:0px; margin:0;width:100%">
                        <MudItem xl="6" lg="6" md="6" sm="4" xs="12" Style="padding:0px; margin:0;">
                            <MudText Style="font-size: 22px; font-weight: bold;color:#29a69a">Danh sách tài khoản</MudText>
                        </MudItem>
                        <MudItem xl="6" lg="6" md="6" sm="8" xs="12" Style="padding:0px; margin:0;">
                            <MudTextField T="string" Placeholder="Search" Adornment="Adornment.Start" @bind-Value="searchValue"
                                          AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0" TextChanged="onChangeSearch" Immediate=true></MudTextField>
                        </MudItem>
                    </MudGrid>
                </ToolBarContent>
                <HeaderContent>
                    <MudTh><MudTableSortLabel SortLabel="Tên" T="string">Tên Sinh Viên</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortLabel="Email" T="string">Email</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortLabel="Tên Bài Thi" T="string">Tên Bài Thi</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortLabel="Môn" T="string">Môn</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortLabel="Thời gian nộp" T="string">Thời gian nộp</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortLabel="Thao tác" T="string">Thao tác</MudTableSortLabel></MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Tên">@context.SubjectName</MudTd>
                    <MudTd DataLabel="Email">@context.Email</MudTd>
                    <MudTd DataLabel="Tên Bài Thi">@context.ExamName</MudTd>
                    <MudTd DataLabel="Môn">@context.SubjectName</MudTd>
                    <MudTd DataLabel="Thời gian nộp">@context.SubmitTime.ToString("dd/MM/yyyy HH:mm")</MudTd>
                    <MudTd DataLabel="Thao tác">
                        <MudTooltip Text="Chi tiết">
                            <MudIconButton Icon="@Icons.Material.Filled.Notes" @onclick="() => ViewSubmision(context.ID) " aria-label="details"></MudIconButton>
                        </MudTooltip>
                        <MudTooltip Text="Hành động">
                            <MudIconButton Icon="@Icons.Material.Filled.Girl" aria-label="hd"></MudIconButton>
                        </MudTooltip>
                    </MudTd>
                </RowTemplate>
                <NoRecordsContent>
                    <MudText>Không có dữ liệu</MudText>
                </NoRecordsContent>
                <LoadingContent>
                    <MudText>Loading...</MudText>
                </LoadingContent>
                <PagerContent>
                    <MudTablePager />
                </PagerContent>
            </MudTable>
        </div>
    </div>
}

@code {
    private int subjectId = -1;
    private int classId = -1;
    private bool isLoading = false;
    private Guid _userId;
    private List<Subject> _lstSubject = new List<Subject>();
    private List<Class> _lstClass = new List<Class>();
    private List<SubmissionViewModel> _lstSubmission = new List<SubmissionViewModel>();
    private string? textSearch;
    private string searchValue;
    private DateTime? startTime;
    private DateTime? endTime;

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                isLoading = true;
                StateHasChanged();

                var userId = await ProtectedSessionStore.GetAsync<string>("userLogin");
                _userId = Guid.Parse(userId.Value);
                startTime = DateTime.Now.AddDays(-7);
                endTime = DateTime.Now.AddDays(+1);
                await loadData();
            }
            catch { }
            finally
            {

                isLoading = false;
                StateHasChanged();
            }
        }
    }

    private async Task loadData()
    {
        _lstSubject = await _serSub.GetAllSub(null, true);
        _lstClass = await _serClass.GetClassList(null, true);
        _lstSubmission = await _serSub.GetAllBySubjectId(subjectId, searchValue, _userId, classId, startTime, endTime);
    }

    private async Task onChangeSearch()
    {
        _lstSubmission = await _serSub.GetAllBySubjectId(subjectId, searchValue, _userId, classId, startTime, endTime);
    }

    private void ViewSubmision(int id)
    {
        navigation.NavigateTo("/result-of-submission/" + id, forceLoad: true);
    }

    private async Task SelectValueSubjectChanged()
    {
        _lstSubmission = await _serSub.GetAllBySubjectId(subjectId, searchValue, _userId, classId, startTime, endTime);
    }

    private async Task SelectValueLevelChanged()
    {
        _lstSubmission = await _serSub.GetAllBySubjectId(subjectId, searchValue, _userId, classId, startTime, endTime);
    }

    private async Task selectStartChanged()
    {
        _lstSubmission = await _serSub.GetAllBySubjectId(subjectId, searchValue, _userId, classId, startTime, endTime);
    }

    private async Task selectEndChanged()
    {
        _lstSubmission = await _serSub.GetAllBySubjectId(subjectId, searchValue, _userId, classId, startTime, endTime);
    }
}
