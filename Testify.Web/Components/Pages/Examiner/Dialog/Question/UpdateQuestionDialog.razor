@using Testify.DAL.Models
@using Testify.Web.Shared;

<MudDialog>
    <TitleContent>
        <MudText Style="font-size: 18px; font-weight: bold; text-transform: uppercase">Cập nhật câu hỏi</MudText>
    </TitleContent>
    <DialogContent>
        @if (isLoading)
        {
            <LoadingContext />
        }
        else
        {
            <MudForm Spacing="5" Model="@question" @ref="@form">
                <MudTextField @bind-Value="question.Content" For="@(() => question.Content)" Style="padding: 0" T="string" Label="Tên Câu Hỏi" Variant="Variant.Outlined" />
                <div class="d-flex justify-content-between align-items-center gap-2">
                    <MudTextField @bind-Value="currentFileImage" Style="padding: 0" T="string" ReadOnly=true Variant="Variant.Outlined" />
                    <MudFileUpload T="IBrowserFile" FilesChanged="UploadFiles" Accept=".png, .jpg, .mp3">
                        <ActivatorContent>
                            <MudFab StartIcon="@Icons.Material.Filled.Image"
                                    Label="Thêm Ảnh" />
                        </ActivatorContent>
                    </MudFileUpload>
                </div>
                <MudSelect T="int" @bind-Value="questionLevelId" Label="Mức độ" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">
                    @if (questionLevelId == -1)
                    {
                        <MudSelectItem Value="@questionLevelId">Không có</MudSelectItem>
                    }
                    @foreach (var itemLevel in _lstQuestionLevels)
                    {
                        <MudSelectItem Value="itemLevel.Id">@itemLevel.Name</MudSelectItem>
                    }
                </MudSelect>

                <MudSelect T="int" @bind-Value="question.SubjectId" Label="Môn" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">
                    @foreach (var item in _lstSubjects)
                    {
                        <MudSelectItem Value="item.Id">@item.Name</MudSelectItem>
                    }
                </MudSelect>
            </MudForm>
        }
    </DialogContent>
    <DialogActions>

        <MudButton OnClick="Cancel">Đóng</MudButton>
        <MudButton Color="Color.Warning" OnClick="Submit">Sửa</MudButton>
    </DialogActions>
</MudDialog>

@code {
    private Question question { get; set; } = new();
    private Question questionMock { get; set; } = new();
    private List<QuestionLevel> _lstQuestionLevels = new List<QuestionLevel>();
    private List<Subject> _lstSubjects = new List<Subject>();
    private bool isLoading { get; set; } = false;
    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; }
    [Parameter]
    public int QuestionId { get; set; }
    MudForm form;
    private int questionLevelId;
    private IBrowserFile selectFile;
    private string newNameFile;
    private string currentFileImage = "";
    private Guid _userId;

    private string[] allowFileUpload = { ".jpg", ".png", ".mp3" };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                isLoading = true;
                StateHasChanged();

                var userId = await ProtectedSessionStore.GetAsync<string>("userLogin");
                _userId = Guid.Parse(userId.Value);
                await LoadData("");
            }
            catch { }
            finally
            {

                isLoading = false;
                StateHasChanged();
            }

        }
    }

    private async Task LoadData(string? textSearch)
    {
        _lstQuestionLevels = await _serQuestionLevel.GetAllQuestionLevels(textSearch);

        _lstSubjects = await _serSub.GetAllSub(null, true);

        question = await _serQuestion.GetQuestionById(QuestionId);

        questionMock = question;

        questionLevelId = question.QuestionLevelId ?? -1;

        currentFileImage = question.DocumentPath ?? "";

    }

    protected override async Task OnInitializedAsync()
    {
    }

    private bool ValidationForm()
    {
        int count = 0;
        if (string.IsNullOrEmpty(question.Content) || string.IsNullOrWhiteSpace(question.Content))
        {
            snackbar.Add("Nội dung trống!", Severity.Error);
            count += 1;
        }

        if (count > 0)
        {
            return true;
        }

        return false;
    }

    private void UploadFiles(IBrowserFile file)
    {
        if (file == null)
        {
            return;
        }
        var contentAfterDotLast = Path.GetExtension(file.Name);

        if (!allowFileUpload.Contains(contentAfterDotLast))
        {
            snackbar.Add("Dạng file không đúng. Chỉ nhận ảnh hoặc nghe!", Severity.Error);
            return;
        }

        currentFileImage = file.Name;
        selectFile = file;
    }

    private async Task SaveFileUpload()
    {
        if (selectFile == null)
        {
            return;
        }
        else
        {
            var filePath = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot/Uploads", newNameFile);
            using (var stream = new FileStream(filePath, FileMode.Create))
            {
                await selectFile.OpenReadStream().CopyToAsync(stream);
            }
        }
    }

    private void RenameImage(int questionId)
    {
        if (selectFile != null)
        {
            var extention = Path.GetExtension(selectFile.Name);
            newNameFile = $"imageQID{questionId}{extention}";
        }
    }

    private async Task Submit()
    {

        var checkValidation = ValidationForm();

        if (!checkValidation)
        {
            var hasQuestion = await _serQuestion.Checkvalidate(question.Content, question.QuestionTypeId, question.SubjectId, question.Id);
            if (hasQuestion)
            {
                snackbar.Add("Đã tồn tại câu hỏi này!", Severity.Warning);
                return;
            }

            var hasExamSchedule = await _serQuestion.CheckUpdate(question.Id);
            if (hasExamSchedule)
            {
                snackbar.Add("Không thể sửa!", Severity.Warning);
                return;
            }

            RenameImage(question.Id);
            question.DocumentPath = newNameFile;
            question.UpdatedAt = DateTime.Now;
            question.UpdatedBy = _userId;
            question.QuestionLevelId = questionLevelId == -1 ? null : questionLevelId;
            var check = await _serQuestion.UpdateQuestion(question);
            await SaveFileUpload();
            if (check != null)
            {
                MudDialog.Close(DialogResult.Ok(true));
                snackbar.Add("Cập nhật thành công", Severity.Success);
            }
            else
            {
                MudDialog.Close(DialogResult.Ok(true));
                snackbar.Add("Cập nhật thất bại", Severity.Error);
            }
        }
    }

    private void Cancel() => MudDialog.Cancel();
}
