@using OfficeOpenXml;
@using Testify.DAL.ViewModels
@inject IJSRuntime jsruntime;

@if(isLoading)
{
    <Testify.Web.Shared.LoadingContext />
}
else
{
    <MudDialog>
        <TitleContent>
            <MudGrid Class="align-items-center">
                <MudItem xs="12" sm="6" md="10">
                    <MudText Style="font-size: 18px; font-weight: bold; text-transform: uppercase; width: 100%">Tạo mới câu hỏi và đáp án bằng file excel</MudText>
                </MudItem>
                <MudItem xs="12" sm="6" md="2">
                    <MudButton Class="w-100 bg-success text-white" OnClick="ExportTemPlateQuestion">Tải file mẫu</MudButton>
                </MudItem>
            </MudGrid>
        </TitleContent>
        <DialogContent>
            <MudPaper Class="mb-3" Elevation="0">
                <MudText Class="fw-bold mb-1">Vui lòng chọn môn cần thêm câu hỏi:</MudText>
                <MudSelect T="int" @bind-Value="@subjectId">
                    @if (subjectId == -1)
                    {
                        <MudSelectItem Value="-1">Không có lớp nào!</MudSelectItem>
                    }
                    else
                    {
                        @foreach (var item in _lstSubject)
                        {
                            <MudSelectItem Value="item.Id">@item.Name</MudSelectItem>
                        }
                    }
                </MudSelect>
            </MudPaper>

            <MudPaper Elevation="0" Class="bg-transparent py-4 d-flex justify-content-between align-items-center gap-3">
                <MudTextField T="string" @bind-Value="@nameFileCurrent"></MudTextField>
                <MudFileUpload T="IBrowserFile" Accept=".xlsx, .xls" FilesChanged="UploadChange">
                    <ActivatorContent>
                        <MudFab StartIcon="@Icons.Material.Filled.FileUpload"
                                Label="File Excel" />
                    </ActivatorContent>
                </MudFileUpload>
            </MudPaper>

            <MudPaper Elevation="0" Class="bg-transparent mt-3 d-flex justify-content-between align-items-center">
                <MudButton Class="bg-info text-white" OnClick="@(() => Submit(false))">Kiểm tra file excel</MudButton>
                <MudText><span style="color: #29a69a;">Số câu đạt:</span> <span class="fw-bold">@countQuestionPass</span> / @countQuestion</MudText>
            </MudPaper>

            <MudPaper Elevation="0" Class="bg-transparent mt-3">
                @if (_lstQuestionExcelFail != null)
                {
                    <MudTable Items="@_lstQuestionExcelFail" Dense="true" Virtualize="true" FixedHeader="true" HorizontalScrollbar="true">
                        <RowTemplate>
                            <MudTd DataLabel="Id câu hỏi" hidden>@context.connectionId</MudTd>
                            <MudTd DataLabel="Tên câu hỏi">@context.Content</MudTd>
                            <MudTd DataLabel="Mã mức độ câu hỏi">@context.QuestionLevelId</MudTd>
                            <MudTd DataLabel="Mã loại câu hỏi">@context.QuestionTypeId</MudTd>
                            <MudTd DataLabel="Mã môn">@context.SubjectId</MudTd>
                            <MudTd DataLabel="Loại lỗi" Style="color: red">@context.ErorrMessage</MudTd>
                        </RowTemplate>

                        <NoRecordsContent>
                            <MudText>No Data</MudText>
                        </NoRecordsContent>
                        <PagerContent>
                            <MudTablePager />
                        </PagerContent>
                    </MudTable>
                }
            </MudPaper>
        </DialogContent>
        <DialogActions>
            <MudButton OnClick="Cancel">Cancel</MudButton>
            <MudButton Color="Color.Primary" OnClick="@(() => Submit(true))">Thêm mới</MudButton>
        </DialogActions>
    </MudDialog>
}

@code {
    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; }

    [Inject]
    private IDialogService _mudDialogServices { get; set; }

    private List<QuestionInExcel>? _lstQuestionExcelPass;
    private List<QuestionInExcel>? _lstQuestionExcelFail;
    private List<Subject> _lstSubject = new List<Subject>();

    private int subjectId = -1;
    private string nameFileCurrent;
    private IBrowserFile selectFileCurrent;
    private string[] allowFileUpload = { ".xlsx", ".xls" };
    private int countQuestion;
    private int countQuestionPass;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        _lstSubject = await _serSub.GetAllSub("", true);
        if(_lstSubject.Any())
        {
            subjectId = _lstSubject[0].Id;
        }
        isLoading = false;
    }

    private async Task UploadChange(IBrowserFile file)
    {
        if (file == null)
        {
            return;
        }
        var contentAfterDotLast = Path.GetExtension(file.Name);

        if (!allowFileUpload.Contains(contentAfterDotLast))
        {
            snackbar.Add("Dạng file không đúng. Chỉ nhận file excel!", Severity.Error);
            return;
        }

        nameFileCurrent = file.Name;
        selectFileCurrent = file;
    }

    private async Task Submit(bool isSubmit)
    {
        _lstQuestionExcelPass = new List<QuestionInExcel>();
        _lstQuestionExcelFail = new List<QuestionInExcel>();
        countQuestion = 0;
        countQuestionPass = 0;

        if (selectFileCurrent == null)
        {
            snackbar.Add("Chưa chọn file import", Severity.Error);
            return;
        }

        var lstQuestionChecked = await _serQuestion.ImportExcelQuestion(selectFileCurrent);

        if (lstQuestionChecked.Any())
        {
            foreach (var item in lstQuestionChecked)
            {
                countQuestion++;
                if (item.PassFail == false)
                {
                    _lstQuestionExcelFail.Add(item);
                }
                else if(item.PassFail == true)
                {
                    countQuestionPass++;
                    _lstQuestionExcelPass.Add(item);
                }
            }
        }



        // using var stream = new MemoryStream();
        // await selectFileCurrent.OpenReadStream().CopyToAsync(stream);
        // stream.Position = 0;

        // ExcelPackage package = new ExcelPackage(stream);
        // ExcelPackage.LicenseContext = OfficeOpenXml.LicenseContext.NonCommercial;
        // ExcelWorksheet worksheetQuestion = package.Workbook.Worksheets[0];
        // ExcelWorksheet worksheetAnswer = package.Workbook.Worksheets[1];
        // int rowCount = worksheetQuestion.Dimension.Rows;
        // int colCount = worksheetQuestion.Dimension.Columns;

        // _lstQuestionExcelPass = new List<QuestionInexcel>();
        // _lstQuestionExcelFail = new List<QuestionInexcel>();
        // lstAnswerInExcel = new List<AnswerInExcel>();
        // countQuestion = 0;

        // for (int rowQ = 2; rowQ <= worksheetQuestion.Dimension.Rows; rowQ++)
        // {
        //     try
        //     {
        //         countQuestion++;
        //         QuestionInexcel question = new QuestionInexcel();
        //         question.connectionId = worksheetQuestion.Cells[rowQ, 1].Value != null ? Convert.ToInt32(worksheetQuestion.Cells[rowQ, 1].Value.ToString()) : -1;
        //         question.Content = worksheetQuestion.Cells[rowQ, 2].Value != null ? worksheetQuestion.Cells[rowQ, 2].Value.ToString() : "";
        //         question.QuestionLevelId = worksheetQuestion.Cells[rowQ, 3].Value != null ? Convert.ToInt32(worksheetQuestion.Cells[rowQ, 3].Value.ToString()) : -1;
        //         question.QuestionTypeId = worksheetQuestion.Cells[rowQ, 4].Value != null ? Convert.ToInt32(worksheetQuestion.Cells[rowQ, 4].Value.ToString()) : -1;
        //         question.SubjectId = worksheetQuestion.Cells[rowQ, 5].Value != null ? Convert.ToInt32(worksheetQuestion.Cells[rowQ, 5].Value.ToString()) : -1;

        //         if (question.Content == "" || question.connectionId == -1 || question.QuestionLevelId == -1 || question.QuestionTypeId == -1 || question.SubjectId == -1)
        //         {
        //             question.ErorrMessage = "Có dữ liệu bị trống. Kiểm tra lại";
        //             _lstQuestionExcelFail.Add(question);
        //             continue;
        //         }
        //         else if (_lstSubJect.FirstOrDefault(x => x.Id == question.SubjectId) == null)
        //         {
        //             question.ErorrMessage = "Mã môn không có trong dữ liệu";
        //             _lstQuestionExcelFail.Add(question);
        //             continue;
        //         }
        //         else if (_lstQuestionLevel.FirstOrDefault(x => x.Id == question.QuestionLevelId) == null)
        //         {
        //             question.ErorrMessage = "Mã mức độ câu hỏi không có trong dữ liệu";
        //             _lstQuestionExcelFail.Add(question);
        //             continue;
        //         }
        //         else if (_lstQuestionType.FirstOrDefault(x => x.Id == question.QuestionTypeId) == null)
        //         {
        //             question.ErorrMessage = "Mã loại câu hỏi không có trong dữ liệu";
        //             _lstQuestionExcelFail.Add(question);
        //             continue;
        //         }

        //         List<AnswerInExcel> tempAnswer = new List<AnswerInExcel>();
        //         bool isValidAnswer = true;
        //         int countAnswer = 0;

        //         for (int rowA = 2; rowA <= worksheetAnswer.Dimension.Rows; rowA++)
        //         {
        //             try
        //             {
        //                 if (worksheetQuestion.Cells[rowQ, 1].Value.ToString() == worksheetAnswer.Cells[rowA, 1].Value.ToString())
        //                 {
        //                     countAnswer++;
        //                     if (worksheetAnswer.Cells[rowA, 1].Value == null || worksheetAnswer.Cells[rowA, 2].Value == null || worksheetAnswer.Cells[rowA, 3].Value == null)
        //                     {
        //                         isValidAnswer = false;
        //                         break;
        //                     }
        //                     AnswerInExcel answer = new AnswerInExcel();
        //                     answer.ConnectionId = Convert.ToInt32(worksheetAnswer.Cells[rowA, 1].Value.ToString());
        //                     answer.Content = worksheetAnswer.Cells[rowA, 2].Value.ToString();
        //                     answer.IsCorrect = worksheetAnswer.Cells[rowA, 3].Value.ToString() == "1" ? true : false;
        //                     tempAnswer.Add(answer);
        //                 }
        //             }
        //             catch { }
        //         }

        //         if (isValidAnswer && tempAnswer.Count == countAnswer)
        //         {
        //             question.Answers = tempAnswer;
        //             _lstQuestionExcelPass.Add(question);
        //         }
        //         else
        //         {
        //             question.ErorrMessage = "Câu hỏi có đáp án không hợp lệ (rỗng hoặc sai thông tin nhập vào)";
        //             _lstQuestionExcelFail.Add(question);
        //         }
        //     }
        //     catch { }
        // }

        if (isSubmit == true)
        {
            var confirm = await _mudDialogServices.ShowMessageBox
            (
                "Thông báo",
                $"Bạn chắc chắn muốn thêm {countQuestionPass} / {countQuestion} đạt?",
                "Xác nhận",
                cancelText: "Cancel"
            );

            if (confirm == true)
            {
                foreach (var item in _lstQuestionExcelPass)
                {
                    Question q = new Question();
                    q.Content = item.Content;
                    if(item.QuestionLevelId >= 0)
                    {
                        q.QuestionLevelId = item.QuestionLevelId;
                    }
                    q.QuestionTypeId = item.QuestionTypeId;
                    q.SubjectId = subjectId;
                    q.Status = 1;
                    q.CreatedDate = DateTime.Now;

                    var addNewQuestion = await _serQuestion.CreateQuestion(q);

                    if (addNewQuestion != null)
                    {
                        foreach (var a in item.Answers)
                        {
                            Answer ans = new Answer();
                            ans.QuestionId = addNewQuestion.Id;
                            ans.Content = a.Content;
                            ans.IsCorrect = a.IsCorrect;
                            ans.Status = 1;
                            await _serAnswer.Create(ans);
                        }
                    }
                }

                MudDialog.Close(DialogResult.Ok(true));
                snackbar.Add("Thêm câu hỏi thành công", Severity.Success);
            }
        }
    }

    private async Task ExportTemPlateQuestion()
    {
        var response = await _serQuestion.ExportExcelQuestion();

        if(response.IsSuccessStatusCode)
        {
            var fileContent = await response.Content.ReadAsByteArrayAsync();
            var fileName = "Template_Question_LVT.xlsx";

            // Tạo một URL Blob từ nội dung của file Excel
            var fileUrl = $"data:application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;base64,{Convert.ToBase64String(fileContent)}";

            // Sử dụng JavaScript để tạo link tải file
            await jsruntime.InvokeVoidAsync("downloadFile", fileUrl, fileName);
        }
    }

    private void Cancel() => MudDialog.Close(DialogResult.Ok(true));
}

<script>
    window.downloadFile = function (url, fileName) {
        const link = document.createElement('a');
        link.href = url;
        link.download = fileName;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    }
</script>
