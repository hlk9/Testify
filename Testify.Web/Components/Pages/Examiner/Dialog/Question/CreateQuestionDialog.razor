@using Testify.DAL.Models;
@using Testify.DAL.ViewModels
@using Testify.Web.Shared;
@using Testify.Web.Data.Commons;
@inject IJSRuntime jsruntime;

<MudDialog>
    <TitleContent>
        <MudText Style="font-size: 18px; font-weight: bold; text-transform: uppercase">Tạo mới câu hỏi và đáp án</MudText>
    </TitleContent>
    <DialogContent>
        @if (isLoading)
        {
            <LoadingContext />
        }
        else
        {
            <MudTabs ApplyEffectsToContainer="true">
                <MudTabPanel Text="Thêm Mới">
                    @if (isLoading)
                    {
                        <LoadingContext />
                    }
                    else
                    {
                        <MudPaper Elevation="0" Class="mt-3">
                            <div class="w-100 mb-2">
                                <MudText Style="font-size: 16px; font-weight: bold">Câu Hỏi:</MudText>
                            </div>
                            <MudForm Spacing="4" Model="@question" @ref="@form">
                                <MudGrid Class="p-0 m-0 w-100">
                                    <MudItem md="4" xs="12" Class="w-100 ps-0 pe-0 pe-md-3">
                                        <MudSelect Class="w-100" T="int" @bind-Value="questionLevelId" Label="Mức độ" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">
                                            @if (questionLevelId == -1)
                                            {
                                                <MudSelectItem Value="-1">Chọn mức độ câu hỏi</MudSelectItem>
                                            }
                                            @foreach (var itemLevel in _lstQuestionLevels)
                                            {
                                                <MudSelectItem Value="@itemLevel.Id">@itemLevel.Name</MudSelectItem>
                                            }
                                        </MudSelect>
                                    </MudItem>

                                    <MudItem md="4" xs="12" Class="w-100 px-0 px-md-2   ">
                                        <MudSelect T="int" @bind-Value="questionTypeId" Label="Loại" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter" SelectedValuesChanged="changeValueType">

                                            @if (questionTypeId == -1)
                                            {
                                                <MudSelectItem Value="-1">Chọn loại câu hỏi</MudSelectItem>
                                            }
                                            @foreach (var itemType in _lstQuestionTypes)
                                            {
                                                <MudSelectItem Value="@itemType.Id">@itemType.Name</MudSelectItem>
                                            }
                                        </MudSelect>
                                    </MudItem>

                                    <MudItem md="4" xs="12" Class="w-100 pe-0 ps-0 ps-md-3">
                                        <MudSelect T="int" @bind-Value="subjectId" Label="Môn" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">
                                            @if (subjectId == -1)
                                            {
                                                <MudSelectItem Value="-1">Chọn môn học</MudSelectItem>
                                            }
                                            @foreach (var item in _lstSubjects)
                                            {
                                                <MudSelectItem Value="@item.Id">@item.Name</MudSelectItem>
                                            }
                                        </MudSelect>
                                    </MudItem>
                                </MudGrid>

                                <div>
                                    <MudTextField For="@(() => question.Content)" Style="padding: 0" T="string" Label="Nội dung câu hỏi" @bind-Value="question.Content" Variant="Variant.Outlined" />
                                </div>

                                <div class="d-flex justify-content-between align-items-center gap-2">
                                    <MudTextField @bind-Value="@nameFileImageCurrent" Style="padding: 0" T="string" ReadOnly=true Variant="Variant.Outlined"    />
                                    <MudFileUpload T="IBrowserFile" FilesChanged="UploadFileImage" Accept=".jpg, .png, .mp3">
                                        <ActivatorContent>
                                            <MudFab StartIcon="@Icons.Material.Filled.Image"
                                                    Label="Thêm Ảnh" />
                                        </ActivatorContent>
                                    </MudFileUpload>
                                </div>
                            </MudForm>
                        </MudPaper>
                        <MudPaper Elevation="0" Class="mt-5">
                            <MudText Style="font-size: 16px; font-weight: bold">Đáp Án:</MudText>
                            @if (questionTypeId == ((int)listQuestionTypes.YesNo))
                            {
                                <MudRadioGroup T="bool" @bind-Value="@isAnswerCorrectInYesNo">
                                    <MudRadio Value="true">Đúng</MudRadio>
                                    <MudRadio Value="false">Sai</MudRadio>
                                </MudRadioGroup>
                            }
                            else
                            {
                                <MudDataGrid Items="@lstAnswers" Class="my-3">
                                    <Columns>
                                        <PropertyColumn Property="x => x.Content" Title="Nội dung" />
                                        <PropertyColumn Property="x => x.IsCorrect" Title="Đúng/Sai" />
                                        <TemplateColumn CellClass="d-flex justify-end">
                                            <CellTemplate>
                                                <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Delete" OnClick="@(() => RemoveAnswer(context.Item.Id))" />
                                            </CellTemplate>
                                        </TemplateColumn>
                                    </Columns>
                                </MudDataGrid>

                                <MudButton Variant="Variant.Filled"  Color="Color.Primary" OnClick="IsShowAddAnswer">Thêm đáp án</MudButton>

                                @if (isShowAddAnswer)
                                {
                                    <MudPaper Elevation="3" Class="w-100 py-3 px-2 my-3">
                                        <MudForm Model="answer" @ref="form" Spacing="4">
                                            <MudTextField For="@(() => answer.Content)" Style="padding: 0" T="string" Label="Nội dung đáp án" @bind-Value="answer.Content" Variant="Variant.Outlined" />
                                            <MudCheckBox T="bool" @bind-Value="@answer.IsCorrect" Label="Đáp án đúng" />
                                        </MudForm>
                                        <MudButton Color="Color.Primary" OnClick="SaveAnswerInQuestion">Tạo</MudButton>
                                    </MudPaper>
                                }
                            }
                        </MudPaper>

                        <MudPaper Elevation="0" Class="pt-3 text-end">
                            <MudButton OnClick="Cancel">Đóng</MudButton>
                            <MudButton Color="Color.Primary" OnClick="@(() =>Submit(false))">Tạo</MudButton>
                        </MudPaper>
                    }
                </MudTabPanel>
                <MudTabPanel Text="Thêm bằng excel">

                    <MudPaper Class="my-3" Elevation="0">
                        <MudSelect T="int" @bind-Value="subjectId" Label="Vui lòng chọn môn" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">
                            @if (subjectId == -1)
                            {
                                <MudSelectItem Value="-1">Chọn môn học</MudSelectItem>
                            }
                            @foreach (var item in _lstSubjects)
                            {
                                <MudSelectItem Value="@item.Id">@item.Name</MudSelectItem>
                            }
                        </MudSelect>
                    </MudPaper>

                    <MudPaper Elevation="0" Class="bg-transparent py-4 d-flex justify-content-between align-items-center gap-3">
                        <MudTextField T="string" @bind-Value="@nameFileExcelCurrent" Variant="Variant.Outlined"/>
                        <MudFileUpload T="IBrowserFile" Accept=".xlsx, .xls" FilesChanged="UploadFileExcel">
                            <ActivatorContent>
                                <MudFab StartIcon="@Icons.Material.Filled.FileUpload"
                                        Label="File Excel" />
                            </ActivatorContent>
                        </MudFileUpload>
                    </MudPaper>
                    <MudPaper Elevation="0" Class="d-flex justify-content-start gap-2 align-items-center flex-wrap">
                        <MudText>Vui lòng soạn câu hỏi đúng với định dạng:</MudText> <MudButton Class="bg-success text-white my-3" OnClick="ExportTemPlateQuestion">Tải file mẫu</MudButton>
                    </MudPaper>


                    <MudPaper Elevation="0" Class="pt-3 text-end">
                        <MudButton OnClick="Cancel">Đóng</MudButton>
                        <MudButton Color="Color.Primary" OnClick="@(() =>Submit(true))">Tạo</MudButton>
                    </MudPaper>
                </MudTabPanel>
            </MudTabs>
        }
    </DialogContent>
</MudDialog>

@code {
    private Question question { get; set; } = new();
    private Answer answer { get; set; } = new();

    private List<Question> _lstQuestion = new List<Question>();
    private List<Answer> lstAnswers = new List<Answer>();
    private List<QuestionLevel> _lstQuestionLevels = new List<QuestionLevel>();
    private List<QuestionType> _lstQuestionTypes = new List<QuestionType>();
    private List<Subject> _lstSubjects = new List<Subject>();


    private bool isLoading { get; set; } = true;

    private int subjectId = -1;
    private int questionLevelId = -1;
    private int questionTypeId = -1;

    private int countQuestion;
    private int countQuestionPass;
    private int indexAnswer = 1;
    private bool isDisableAddNewAnswer = true;
    private bool chooseAdd = true;
    private bool isAnswerCorrectInYesNo = true;
    private bool isShowAddAnswer = false;


    private IBrowserFile selectFileImage;
    private string nameFileImageCurrent = "";
    private IBrowserFile selectFileExcel;
    private string nameFileExcelCurrent = "";
    private string[] allowFileQuestionUpload = { ".jpg", ".png", ".mp3" };
    private string[] allowFileExcelUpload = { ".xlsx", ".xls" };
    private string newNameFile;

    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; }
    [Inject]
    private IDialogService _mudDialogServices { get; set; }
    MudForm form;

    private async Task LoadData()
    {
        _lstQuestionLevels = await _serQuestionLevel.GetAllQuestionLevels();

        _lstQuestionTypes = await _serQuestionType.GetAllQuestionTypes();

        _lstSubjects = await _serSub.GetAllSub(null, true);

        _lstQuestion = await _serQuestion.GetAllQuestions("", true);

        isLoading = false;
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private void changeValueType()
    {
        lstAnswers.Clear();
    }

    private void IsShowAddAnswer()
    {
        if (questionTypeId == -1 || questionTypeId <= 0)
        {
            snackbar.Add("Vui lòng chọn loại câu hỏi!", Severity.Warning);
            return;
        }
        isShowAddAnswer = !isShowAddAnswer;
    }

    private async Task SaveAnswerInQuestion()
    {
        if (string.IsNullOrEmpty(answer.Content) || answer.Content == null)
        {
            snackbar.Add("Nội dung đáp án trống", Severity.Warning);
            return;
        }

        if (lstAnswers != null && lstAnswers.Count > 0 && lstAnswers.Any(x => x.Content.Trim().ToLower().Equals(answer.Content.Trim().ToLower())))
        {
            snackbar.Add("Đã có đáp án này", Severity.Warning);
            return;
        }

        if (questionTypeId == (int)listQuestionTypes.SingleChoice)
        {
            int answerCorrect = lstAnswers.Count(x => x.IsCorrect);

            if (answerCorrect >= 1 && answer.IsCorrect == true)
            {
                snackbar.Add("Loại câu hỏi chỉ 1 đáp án đúng", Severity.Warning);
                return;
            }
        }

        lstAnswers.Add(answer);
        isShowAddAnswer = false;
        answer = new();
        StateHasChanged();
    }

    private void RemoveAnswer(int answerId)
    {
        lstAnswers.RemoveAt(answerId);
    }

    private bool ValidationForm()
    {
        int count = 0;
        if (question.Content == null || question.Content.Trim().Length == 0)
        {
            snackbar.Add("Nội dung trống!", Severity.Error);
            count += 1;
        }
        if (subjectId == -1 || subjectId == null)
        {
            snackbar.Add("Chưa chọn môn học!", Severity.Error);
            count += 1;
        }
        if (question.QuestionTypeId == -1 || question.QuestionTypeId == null)
        {
            snackbar.Add("Chưa chọn loại câu hỏi", Severity.Error);
            count += 1;
        }
        if (question.SubjectId == -1 || question.SubjectId == null)
        {
            snackbar.Add("Chưa chọn môn học", Severity.Error);
            count += 1;
        }

        if (count > 0)
        {
            return true;
        }

        return false;
    }

    private void UploadFileImage(IBrowserFile file)
    {

        if (file == null)
        {
            return;
        }

        var contentAfterDotLast = Path.GetExtension(file.Name);

        if (!allowFileQuestionUpload.Contains(contentAfterDotLast))
        {
            snackbar.Add("Dạng file không đúng. Chỉ nhận ảnh hoặc nghe!", Severity.Error);
            return;
        }

        nameFileImageCurrent = file.Name;
        selectFileImage = file;
    }

    private void UploadFileExcel(IBrowserFile file)
    {

        if (file == null)
        {
            return;
        }

        var contentAfterDotLast = Path.GetExtension(file.Name);

        if (!allowFileExcelUpload.Contains(contentAfterDotLast))
        {
            snackbar.Add("Dạng file không đúng. Chỉ nhận file excel!", Severity.Error);
            return;
        }

        nameFileExcelCurrent = file.Name;
        selectFileExcel = file;
    }

    private async Task SaveFileUpload()
    {
        if (selectFileImage == null)
        {
            return;
        }
        else
        {
            var filePath = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot/Uploads", newNameFile);
            using (var stream = new FileStream(filePath, FileMode.Create))
            {
                await selectFileImage.OpenReadStream().CopyToAsync(stream);
            }
        }
    }

    private void RenameImage(int questionId)
    {
        if (selectFileImage != null)
        {
            var extention = Path.GetExtension(selectFileImage.Name);
            newNameFile = $"imageQID{questionId}{extention}";
        }
    }

    private async Task ExportTemPlateQuestion()
    {
        var response = await _serQuestion.ExportExcelQuestion();

        if (response.IsSuccessStatusCode)
        {
            var fileContent = await response.Content.ReadAsByteArrayAsync();
            var fileName = "Template_Question_LVT.xlsx";
            var fileUrl = $"data:application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;base64,{Convert.ToBase64String(fileContent)}";
            await jsruntime.InvokeVoidAsync("downloadFile", fileUrl, fileName);
        }
    }

    private async Task Submit(bool isType)
    {
        if (isType)
        {

            try
            {
                isLoading = true;

                if (subjectId == null || subjectId <= 0)
                {
                    snackbar.Add("Chưa chọn môn", Severity.Warning);
                    return;
                }
                if (selectFileExcel == null)
                {
                    snackbar.Add("Chưa chọn file import", Severity.Error);
                    return;
                }
                var check = await _serQuestion.ImportExcelQuestion(selectFileExcel, subjectId);

                snackbar.Add($"Thêm câu hỏi thành công, trong đó có {check} không thêm được", Severity.Info);
                MudDialog.Close(DialogResult.Ok(true));
            }
            catch (Exception ex)
            {
                snackbar.Add($"Đã xảy ra lỗi: {ex.Message}", Severity.Error);
            }
            finally
            {
                isLoading = false;
            }
        }
        else
        {
            var checkValidation = ValidationForm();

            if (questionTypeId == (int)listQuestionTypes.YesNo)
            {
                lstAnswers.Clear();
                lstAnswers.Add(new Answer { Content = "Đúng", IsCorrect = isAnswerCorrectInYesNo });
                lstAnswers.Add(new Answer { Content = "Sai", IsCorrect = !isAnswerCorrectInYesNo });
            }

            if (lstAnswers == null || lstAnswers.Count <= 0)
            {
                snackbar.Add("Chưa có đáp án", Severity.Warning);
                return;
            }


            if (lstAnswers.Count <= 1 && lstAnswers != null)
            {
                snackbar.Add("Tối thiểu 2 đáp án", Severity.Warning);
            }

            if (questionTypeId == (int)listQuestionTypes.MultipleChoices || questionTypeId == (int)listQuestionTypes.SingleChoice)
            {
                int countCorrect = lstAnswers.Count(x => x.IsCorrect);

                if (countCorrect <= 0)
                {
                    snackbar.Add("Phải có ít nhất 1 đáp án đúng", Severity.Warning);
                    return;
                }
            }

            question.CreatedDate = DateTime.Now;
            question.QuestionTypeId = questionTypeId;
            question.QuestionLevelId = questionLevelId == -1 ? null : questionLevelId;
            question.SubjectId = subjectId;
            question.Status = (byte)StatusType.isActive;

            if (!checkValidation)
            {
                var checkAddNewQuestion = await _serQuestion.CreateQuestion(question);
                if (checkAddNewQuestion != null)
                {
                    RenameImage(checkAddNewQuestion.Id);
                    checkAddNewQuestion.DocumentPath = newNameFile;
                    var checkUploadQuestion = await _serQuestion.UpdateUpload(checkAddNewQuestion);
                    await SaveFileUpload();
                    for (int i = 0; i < lstAnswers.Count; i++)
                    {
                        lstAnswers[i].QuestionId = checkAddNewQuestion.Id;
                        lstAnswers[i].Status = Convert.ToByte(StatusType.isActive);
                        var checkAddNewAnswer = await _serAnswer.Create(lstAnswers[i]);
                    }
                    MudDialog.Close(DialogResult.Ok(true));
                    snackbar.Add("Thêm thành công", Severity.Success);
                    lstAnswers.Clear();
                }
                else
                {
                    MudDialog.Close(DialogResult.Ok(true));
                    snackbar.Add("Thêm thất bại", Severity.Error);
                }
            }
        }
    }
    private void Cancel() => MudDialog.Cancel();
}

<script>
    window.downloadFile = function (url, fileName) {
        const link = document.createElement('a');
        link.href = url;
        link.download = fileName;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    }
</script>