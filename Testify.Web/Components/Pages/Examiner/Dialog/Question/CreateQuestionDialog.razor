@using Testify.DAL.Models
@using Testify.Web.Components.Pages.Examiner.Component
@using Testify.Web.Utils
@using Testify.Web.utils

<MudDialog>
    <TitleContent>
        <MudText Style="font-size: 18px; font-weight: bold; text-transform: uppercase">Tạo mới câu hỏi và đáp án</MudText>
    </TitleContent>
    <DialogContent>
        <MudGrid>
            <MudItem xl="6" lg="6" md="7" sm="12" xs="12">
                <div class="w-100 mb-2">
                    <MudText Style="font-size: 16px">Câu Hỏi:</MudText>
                </div>
                <MudForm Spacing="4" Model="@question" @ref="@form">
                    <MudTextField @bind-Value="question.Content" For="@(() => question.Content)" Style="padding: 0" T="string" Label="Tên Câu Hỏi" />
                    <MudTextField @bind-Value="question.DocumentURL" For="@(() => question.DocumentURL)" Style="padding: 0" T="string" Label="Link Câu Hỏi" />
                    <MudSelect T="int" @bind-Value="question.QuestionLevelId" Label="Mức độ" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">
                        @if (_lstQuestionLevels != null)
                        {
                            @foreach (var itemLevel in _lstQuestionLevels)
                            {
                                <MudSelectItem Value="itemLevel.Id">@itemLevel.Name</MudSelectItem>
                            }
                        }

                    </MudSelect>

                    <MudSelect T="int" @bind-Value="QuestionTypeId" Label="Loại" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter" SelectedValuesChanged="ChangeValueQuestionType">

                        @if (_lstQuestionTypes != null)
                        {
                            @foreach (var itemType in _lstQuestionTypes)
                            {
                                <MudSelectItem Value="itemType.Id">@itemType.Name</MudSelectItem>
                            }
                        }

                    </MudSelect>

                    <MudSelect T="int" @bind-Value="question.SubjectId" Label="Môn" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">

                        @if (_lstSubjects != null)
                        {
                            @foreach (var item in _lstSubjects)
                            {
                                <MudSelectItem Value="item.Id">@item.Name</MudSelectItem>
                            }
                        }
                    </MudSelect>
                </MudForm>
            </MudItem>

            <MudItem xl="6" lg="6" md="5" sm="12" xs="12">
                <div class="w-100 d-flex justify-content-between align-items-center">
                    <MudText Style="font-size: 16px" Disabled="isDisableAddNewAnswer">Đáp Án:</MudText>
                    <MudIconButton Class="p-0" Icon="@Icons.Material.Filled.Add" aria-label="AddNewAnswer" Disabled="isDisableAddNewAnswer" OnClick="AddNewAnswer"></MudIconButton>
                </div>
                @foreach (var item in lstAnswers)
                {
                    <AnswerForm answer="item" OnRemove="RemoveAnswerForm" questionTypeId="QuestionTypeId" @ref="answerForms[lstAnswers.IndexOf(item)]" />
                }
            </MudItem>
        </MudGrid>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit">Thêm mới</MudButton>
    </DialogActions>
</MudDialog>

@code {
    private Question question { get; set; } = new();
    private List<QuestionLevel> _lstQuestionLevels;
    private List<QuestionType> _lstQuestionTypes;
    private List<Subject> _lstSubjects;
    private List<Answer> lstAnswers = new List<Answer>();
    private int QuestionTypeId = 0;
    private int indexAnswer = 1;
    private bool isDisableAddNewAnswer = true;
    private bool chooseAdd = true;
    private List<AnswerForm> answerForms = new List<AnswerForm>();
    // private bool statusQuestion { get; set; }
    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; }

    MudForm form;

    private async Task LoadData()
    {
        _lstQuestionLevels = await _serQuestionLevel.GetAllQuestionLevels();

        _lstQuestionTypes = await _serQuestionType.GetAllQuestionTypes();

        _lstSubjects = await _serSub.GetAllSub();
    }

    private async Task ChangeValueQuestionType()
    {
        if (QuestionTypeId == Convert.ToInt32(listQuestionTypes.YesNo))
        {

            lstAnswers = new List<Answer>
            {
                new Answer{Content = "Đúng"},
                new Answer{Content = "Sai"},
            };

            answerForms.Add(new AnswerForm { answer = { Content = "Đúng" }, questionTypeId = QuestionTypeId });
            answerForms.Add(new AnswerForm { answer = { Content = "Sai" }, questionTypeId = QuestionTypeId });
            isDisableAddNewAnswer = true;
            return;
        }
        lstAnswers.Clear();
        answerForms.Clear();
        isDisableAddNewAnswer = false;
    }

    private async Task AddNewAnswer()
    {
        if (lstAnswers.Count == 0 || await answerForms.Last().ValidateAsync())
        {
            var newAnswer = new Answer();
            lstAnswers.Add(newAnswer);
            answerForms.Add(new AnswerForm { answer = newAnswer });
        }
    }

    private void RemoveAnswerForm(Answer answerToRemove)
    {
        var index = lstAnswers.IndexOf(answerToRemove);
        if (index >= 0)
        {
            lstAnswers.RemoveAt(index);
            answerForms.RemoveAt(index);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task Submit()
    {
        if (lstAnswers.Count > 0)
        {
            int count = 0;
            for (int i = 0; i < lstAnswers.Count; i++)
            {
                if (lstAnswers[i].IsCorrect == true)
                {
                    count++;
                }
            }

            if (QuestionTypeId == Convert.ToInt32(listQuestionTypes.YesNo) || QuestionTypeId == Convert.ToInt32(listQuestionTypes.SingleChoice))
            {
                if (count > 1)
                {
                    snackbar.Add("Chỉ được 1 đáp án đúng!", Severity.Warning);
                    return;
                }
            }

            if (count == 0)
            {
                snackbar.Add("Phải có ít nhất 1 đáp án đúng", Severity.Warning);
                return;
            }
        }

        bool allValid = true;

        foreach (var form in answerForms)
        {
            if (!await form.ValidateAsync())
            {
                allValid = false;
            }
        }

        if(allValid)
        {
            if(lstAnswers == null || lstAnswers.Count == 0)
            {
                question.Status = Convert.ToByte(StatusType.statusNull);
            } else
            {
                question.Status = Convert.ToByte(StatusType.statusTrue);
            }
            question.CreatedDate = DateTime.Now;
            question.QuestionTypeId = QuestionTypeId;
            var checkAddNewQuestion = await _serQuestion.CreateQuestion(question);
            if (checkAddNewQuestion != null)
            {
                for (int i = 0; i < lstAnswers.Count; i++)
                {
                    lstAnswers[i].QuestionId = checkAddNewQuestion.Id;
                    lstAnswers[i].Status = Convert.ToByte(StatusType.statusTrue);
                    var checkAddNewAnswer = await _serAnswer.Create(lstAnswers[i]);
                }
                MudDialog.Close(DialogResult.Ok(true));
                snackbar.Add("Thêm thành công", Severity.Success);
                lstAnswers.Clear();
            }
            else
            {
                MudDialog.Close(DialogResult.Ok(true));
                snackbar.Add("Thêm thất bại", Severity.Error);
            }
        }
        else
        {
            snackbar.Add("Có đáp án chưa được điền đủ thông tin", Severity.Error);
        }
    }

    private void Cancel() => MudDialog.Cancel();
}
