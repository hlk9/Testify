@using Testify.DAL.Models;
@using Testify.Web.Components.Pages.Examiner.Component;
@using Testify.Web.Shared;
@using Testify.Web.Data.Commons;

<MudDialog>
    <TitleContent>
        <MudText Style="font-size: 18px; font-weight: bold; text-transform: uppercase">Tạo mới câu hỏi và đáp án</MudText>
    </TitleContent>
    <DialogContent>
        @if (isLoading)
        {
            <LoadingContext />
        }
        else
        {
            <MudGrid>
                <MudItem xl="6" lg="6" md="7" sm="12" xs="12">
                    <div class="w-100 mb-2">
                        <MudText Style="font-size: 16px">Câu Hỏi:</MudText>
                    </div>
                    <MudForm Spacing="4" Model="@question" @ref="@form">
                        <div>
                            <MudTextField For="@(() => question.Content)" Style="padding: 0" T="string" Label="Tên Câu Hỏi" @bind-Value="question.Content" />
                        </div>

                        <div class="d-flex justify-content-between align-items-center gap-2">
                            <MudTextField @bind-Value="@currentFileImage" Style="padding: 0" T="string" ReadOnly=true />
                            <MudFileUpload T="IBrowserFile" FilesChanged="UploadFiles" Accept=".jpg, .png, .mp3">
                                <ActivatorContent>
                                    <MudFab StartIcon="@Icons.Material.Filled.Image"
                                            Label="Thêm Ảnh" />
                                </ActivatorContent>
                            </MudFileUpload>
                        </div>

                        <MudSelect T="int" @bind-Value="questionLevelId" Label="Mức độ" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">
                            @if (questionLevelId == -1)
                            {
                                <MudSelectItem Value="-1">Không có loại câu hỏi nào!</MudSelectItem>
                            }
                            else
                            {
                                @foreach (var itemLevel in _lstQuestionLevels)
                                {
                                    <MudSelectItem Value="@itemLevel.Id">@itemLevel.Name</MudSelectItem>
                                }
                            }
                        </MudSelect>

                        <MudSelect T="int" @bind-Value="questionTypeId" Label="Loại" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter" SelectedValuesChanged="ChangeValueQuestionType">

                            @if (questionTypeId == -1)
                            {
                                <MudSelectItem Value="-1">Không có loại câu hỏi nào!</MudSelectItem>
                            }
                            else
                            {
                                @foreach (var itemType in _lstQuestionTypes)
                                {
                                    <MudSelectItem Value="@itemType.Id">@itemType.Name</MudSelectItem>
                                }
                            }

                        </MudSelect>

                        <MudSelect T="int" @bind-Value="subjectId" Label="Môn" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">
                            @if (subjectId == -1)
                            {
                                <MudSelectItem Value="-1">Không có môn nào!</MudSelectItem>
                            }
                            else
                            {
                                @foreach (var item in _lstSubjects)
                                {
                                    <MudSelectItem Value="@item.Id">@item.Name</MudSelectItem>
                                }
                            }
                        </MudSelect>

                    </MudForm>
                </MudItem>

                <MudItem xl="6" lg="6" md="5" sm="12" xs="12">
                    <div class="w-100 d-flex justify-content-between align-items-center">
                        <MudText Style="font-size: 16px" Disabled="isDisableAddNewAnswer">Đáp Án:</MudText>
                        <MudIconButton Class="p-0" Icon="@Icons.Material.Filled.Add" aria-label="AddNewAnswer" Disabled="isDisableAddNewAnswer" OnClick="AddNewAnswer"></MudIconButton>
                    </div>
                    @foreach (var item in lstAnswers)
                    {
                        <AnswerForm answer="item" OnRemove="RemoveAnswerForm" questionTypeId="questionTypeId" @ref="answerForms[lstAnswers.IndexOf(item)]" />
                    }
                </MudItem>
            </MudGrid>
        }
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit">Thêm mới</MudButton>
    </DialogActions>
</MudDialog>

@code {
    private Question question { get; set; } = new();
    private List<QuestionLevel> _lstQuestionLevels;
    private List<QuestionType> _lstQuestionTypes;
    private List<Subject> _lstSubjects;
    private List<Answer> lstAnswers = new List<Answer>();
    private List<AnswerForm> answerForms = new List<AnswerForm>();
    private bool isLoading { get; set; } = true;
    private int indexAnswer = 1;
    private bool isDisableAddNewAnswer = true;
    private bool chooseAdd = true;
    private int questionLevelId = -1;
    private int questionTypeId = -1;
    private int subjectId = -1;
    private string currentFileImage = "";
    private string newNameFile;
    private IBrowserFile selectFile;

    private string[] allowFileUpload = { ".jpg", ".png", ".mp3" };

    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; }

    MudForm form;

    private async Task AddNewAnswer()
    {
        if (lstAnswers.Count == 0 || await answerForms.Last().ValidateAsync())
        {
            var newAnswer = new Answer();
            lstAnswers.Add(newAnswer);
            answerForms.Add(new AnswerForm { answer = newAnswer });
        }
    }

    private async Task ChangeValueQuestionType()
    {
        if (questionTypeId == Convert.ToInt32(listQuestionTypes.YesNo))
        {

            lstAnswers = new List<Answer>
            {
                new Answer{Content = "Đúng"},
                new Answer{Content = "Sai"},
            };

            answerForms.Add(new AnswerForm { answer = { Content = "Đúng" }, questionTypeId = questionTypeId });
            answerForms.Add(new AnswerForm { answer = { Content = "Sai" }, questionTypeId = questionTypeId });
            isDisableAddNewAnswer = true;
            return;
        }
        lstAnswers.Clear();
        answerForms.Clear();
        isDisableAddNewAnswer = false;
    }


    private void RemoveAnswerForm(Answer answerToRemove)
    {
        var index = lstAnswers.IndexOf(answerToRemove);
        if (index >= 0)
        {
            lstAnswers.RemoveAt(index);
            answerForms.RemoveAt(index);
        }
    }

    private async Task LoadData()
    {
        _lstQuestionLevels = await _serQuestionLevel.GetAllQuestionLevels();

        _lstQuestionTypes = await _serQuestionType.GetAllQuestionTypes();

        _lstSubjects = await _serSub.GetAllSub();

        if (_lstQuestionLevels.Any())
        {
            questionLevelId = _lstQuestionLevels[0].Id;
        }
        else
        {
            questionLevelId = -1;
        }

        if (_lstQuestionTypes.Any())
        {
            questionTypeId = _lstQuestionTypes[2].Id;
            isDisableAddNewAnswer = false;
        }
        else
        {
            questionTypeId = -1;
            isDisableAddNewAnswer = true;
        }

        if (_lstSubjects.Any())
        {
            subjectId = _lstQuestionLevels[0].Id;
        }
        else
        {
            subjectId = -1;
        }

        isLoading = false;
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private bool ValidationForm()
    {
        int count = 0;
        if (question.Content == null || question.Content.Trim().Length == 0)
        {
            snackbar.Add("Nội dung trống!", Severity.Error);
            count += 1;
        }
        if (question.QuestionLevelId == -1 || question.QuestionLevelId == null)
        {
            snackbar.Add("Chưa chọn cấp độ câu hỏi", Severity.Error);
            count += 1;
        }
        if (question.QuestionTypeId == -1 || question.QuestionTypeId == null)
        {
            snackbar.Add("Chưa chọn mức độ câu hỏi", Severity.Error);
            count += 1;
        }
        if (question.SubjectId == -1 || question.SubjectId == null)
        {
            snackbar.Add("Chưa chọn môn học", Severity.Error);
            count += 1;
        }

        if (count > 0)
        {
            return true;
        }

        return false;
    }

    private bool CheckAnswerIscorrect()
    {
        if (lstAnswers != null && lstAnswers.Count != 0)
        {
            int count = lstAnswers.Count(x => x.IsCorrect);

            if (questionTypeId == Convert.ToInt32(listQuestionTypes.YesNo) || questionTypeId == Convert.ToInt32(listQuestionTypes.SingleChoice))
            {
                if (count > 1)
                {
                    snackbar.Add("Chỉ được 1 đáp án đúng!", Severity.Warning);
                    return true;
                }
            }

            if (count == 0)
            {
                snackbar.Add("Phải có ít nhất 1 đáp án đúng", Severity.Warning);
                return true;
            }
        }
        return false;
    }

    private void UploadFiles(IBrowserFile file)
    {
        if (file == null)
        {
            return;
        }
        var contentAfterDotLast = Path.GetExtension(file.Name);

        if (!allowFileUpload.Contains(contentAfterDotLast))
        {
            snackbar.Add("Dạng file không đúng. Chỉ nhận ảnh hoặc nghe!", Severity.Error);
            return;
        }

        currentFileImage = file.Name;
        selectFile = file;
    }

    private async Task SaveFileUpload()
    {
        if (selectFile == null)
        {
            return;
        }
        else
        {
            var filePath = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot/ImageUploads", newNameFile);
            using (var stream = new FileStream(filePath, FileMode.Create))
            {
                await selectFile.OpenReadStream().CopyToAsync(stream);
            }
        }
    }

    private void RenameImage(int questionId)
    {
        if (selectFile != null)
        {
            var extention = Path.GetExtension(selectFile.Name);
            newNameFile = $"imageQID{questionId}{extention}";
        }
    }

    private async Task Submit()
    {
        var checkIscorrect = CheckAnswerIscorrect();
        var checkValidation = ValidationForm();

        bool allValid = true;

        foreach (var form in answerForms)
        {
            if (!await form.ValidateAsync())
            {
                allValid = false;
            }
        }

        if (allValid)
        {
            if (lstAnswers == null || lstAnswers.Count == 0)
            {
                question.Status = Convert.ToByte(StatusType.noAnswer);
            }
            else
            {
                question.Status = Convert.ToByte(StatusType.isActive);
            }
            question.CreatedDate = DateTime.Now;
            question.QuestionTypeId = questionTypeId;
            question.QuestionLevelId = questionLevelId;
            question.SubjectId = subjectId;

            if (!checkValidation)
            {
                if (!checkIscorrect)
                {
                    var checkAddNewQuestion = await _serQuestion.CreateQuestion(question);
                    if (checkAddNewQuestion != null)
                    {
                        RenameImage(checkAddNewQuestion.Id);
                        checkAddNewQuestion.DocumentPath = newNameFile;
                        var checkUploadQuestion = await _serQuestion.UpdateUpload(checkAddNewQuestion);
                        await SaveFileUpload();
                        for (int i = 0; i < lstAnswers.Count; i++)
                        {
                            lstAnswers[i].QuestionId = checkAddNewQuestion.Id;
                            lstAnswers[i].Status = Convert.ToByte(StatusType.isActive);
                            var checkAddNewAnswer = await _serAnswer.Create(lstAnswers[i]);
                        }
                        MudDialog.Close(DialogResult.Ok(true));
                        snackbar.Add("Thêm thành công", Severity.Success);
                        lstAnswers.Clear();
                    }
                    else
                    {
                        MudDialog.Close(DialogResult.Ok(true));
                        snackbar.Add("Thêm thất bại", Severity.Error);
                    }
                }

            }

        }
        else
        {
            snackbar.Add("Có đáp án chưa được điền đủ thông tin", Severity.Error);
        }
    }
    private void Cancel() => MudDialog.Cancel();
}
