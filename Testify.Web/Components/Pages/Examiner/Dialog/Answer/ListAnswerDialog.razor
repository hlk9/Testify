@using Testify.DAL.Models
@using Testify.Web.Utils
@using Testify.Web.utils
@using Testify.Web.Shared;
@inject IDialogService DialogService

<MudDialog>
    <TitleContent>
        <MudGrid Style="padding:20px 0; align-items: center">
            <MudItem xl="9" lg="8" md="7" sm="6" xs="12">
                <MudText Style="font-size: 18px; font-weight: bold; text-transform: uppercase">Danh Sách Câu Hỏi</MudText>
            </MudItem>
            <MudItem xl="3" lg="4" md="5" sm="6" xs="12">
            </MudItem>
        </MudGrid>
        
    </TitleContent>
    <DialogContent>
        @if(isLoading)
        {
            <LoadingContext />
        }
        else
        {
            <div class="bg-white rounded-3 mb-4" style="width:100%;">
                <MudTable Items="@lstAnswers" Dense="true" Hover="true" Virtualize="true" FixedHeader="true" HorizontalScrollbar="true" Height="300px">
                    <HeaderContent>
                        <MudTh hidden><MudTableSortLabel SortLabel="Id câu hỏi" T="string" hidden>Id đáp án</MudTableSortLabel></MudTh>
                        <MudTh><MudTableSortLabel SortLabel="Tên câu hỏi" T="string">Nội dung đáp án</MudTableSortLabel></MudTh>
                        <MudTh><MudTableSortLabel SortLabel="Ngày tạo" T="string">Đúng/Sai</MudTableSortLabel></MudTh>
                        <MudTh><MudTableSortLabel SortLabel="Trạng thái" T="string">Trạng thái</MudTableSortLabel></MudTh>
                        <MudTh><MudTableSortLabel SortLabel="Thao tác" T="string">Thao tác</MudTableSortLabel></MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Id đáp án" hidden>@context.Id</MudTd>
                        <MudTd DataLabel="Nội dung đáp án">@context.Content</MudTd>
                        <MudTd DataLabel="Đúng/Sai">
                            @(context.IsCorrect == true ? "Đúng" : "Sai")
                        </MudTd>
                        <MudTd DataLabel="Trạng thái">@(context.Status == Convert.ToByte(StatusType.isActive) ? "Hoạt Động" : "Vô hiệu hóa")</MudTd>
                        <MudTd DataLabel="Thao tác">
                            <MudIconButton Icon="@Icons.Material.Filled.BorderColor" aria-label="update" OnClick="@(() => OpenDialogAsync(_SmallWidth, OpenDialogType.Updatre, context.Id))"></MudIconButton>

                            <MudIconButton Icon="@Icons.Material.Filled.Delete" aria-label="delete" OnClick="@(() => OpenDialogAsync(_SmallWidth, OpenDialogType.Delete, context.Id))" Disabled="CheckTypeQuestion"></MudIconButton>
                        </MudTd>
                    </RowTemplate>

                    <NoRecordsContent>
                        <MudText>No Data</MudText>
                    </NoRecordsContent>
                    <PagerContent>
                        <MudTablePager />
                    </PagerContent>
                </MudTable>

            </div>
        }
    </DialogContent>
</MudDialog>

@code {
    private List<Answer> lstAnswers;

    [Parameter]
    public int questionId { get; set; }

    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; }
    private bool isLoading { get; set; } = true;
    private int questionTypeId = -1;
    private bool CheckTypeQuestion = false;

    private async Task loadData()
    {
        lstAnswers = await _serAnswer.GetAllByQuestionId(questionId);
        StateHasChanged();
        isLoading = false;
    }

    protected override async Task OnInitializedAsync()
    {
        var objQuestion = await _serQuestion.GetQuestionById(questionId);
        questionTypeId = objQuestion.QuestionTypeId;
        if(questionTypeId == Convert.ToInt32(listQuestionTypes.YesNo))
        {
            CheckTypeQuestion = true;
        }
        await loadData();
    }

    private readonly DialogOptions _MediumWidth = new() { MaxWidth = MaxWidth.Medium, FullWidth = true };

    private readonly DialogOptions _SmallWidth = new() { MaxWidth = MaxWidth.Small, FullWidth = true };

    private async Task OpenDialogAsync(DialogOptions options, string name, int id)
    {
        var dialogParametersUpdate = new DialogParameters<Dialog.Answer.UpdateAnswerDialog>
        {
            {x => x.answerId, id}
        };
        var dialogParametersDelete = new DialogParameters<Dialog.Answer.DeleteAnswerDialog>
        {
            {x => x.answerId, id}
        };

        if (name.Equals(OpenDialogType.Updatre))
        {
            var dialog = await DialogService.ShowAsync<Dialog.Answer.UpdateAnswerDialog>("Options dialog", dialogParametersUpdate, options);
            var result = await dialog.Result;
            if (!result.Canceled)
            {
                await loadData();
            }
        }
        else if (name.Equals(OpenDialogType.Delete))
        {
            var dialog = await DialogService.ShowAsync<Dialog.Answer.DeleteAnswerDialog>("Options dialog", dialogParametersDelete, options);
            var result = await dialog.Result;
            if (!result.Canceled)
            {
                await loadData();
            }
        }

    }
}
