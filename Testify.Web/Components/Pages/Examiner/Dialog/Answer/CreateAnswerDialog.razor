@using Testify.DAL.Models;
@using Testify.Web.Components.Pages.Examiner.Component;

<MudDialog>
    <TitleContent>
        <MudText Style="font-size: 18px; font-weight: bold; text-transform: uppercase">Thêm mới đáp án cho câu hỏi</MudText>
    </TitleContent>
    <DialogContent>
        <MudForm Spacing="5"  @ref="form">
            <MudSelect T="int" @bind-Value="@questionId" Label="Chọn câu hỏi cần thêm đáp án" SelectedValuesChanged="@(() =>ChangeValue())" Required="true" RequiredError="Chưa chọn câu hỏi">
                @if(lstQuestion == null ||lstQuestion?.Count == 0)
                {
                    <MudSelectItem T="int" Value="-1">Không có câu hỏi nào!</MudSelectItem>
                }
                else
                {
                    foreach (var item in lstQuestion)
                    {
                        if (item.Status == true || item.Status == false)
                        {
                            continue;
                        }
                        <MudSelectItem Value="@item.Id">@item.Content</MudSelectItem>
                    }
                }
            </MudSelect>

            <div class="w-100 d-flex justify-content-between align-items-center">
                <MudText>Thêm đáp án:</MudText>
                <MudIconButton Class="p-0" Icon="@Icons.Material.Filled.Add" aria-label="AddNeuAnswer" Disabled="IsDisableNewAnswer" OnClick="AddNewAnswer"></MudIconButton>
            </div>

            @if(lstAnswers != null)
            {
                @foreach (var item in lstAnswers)
                {
                    <AnswerForm answer="item" OnRemove="RemoveAnswerForm" questionId="questionId" @ref="answerForms[lstAnswers.IndexOf(item)]" />
                }
            }

        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Surface" Variant="@Variant.Filled" OnClick="Cancel">Hủy</MudButton>
        <MudButton Color="Color.Primary" Variant="@Variant.Filled" OnClick="Submit">Tạo</MudButton>
    </DialogActions>
</MudDialog>

@code {
    MudForm form;
    private Answer answer { get; set; } = new();
    private List<Question>? lstQuestion;
    private List<QuestionType>? lstQuestionType;
    private bool IsDisableNewAnswer = true;
    private int ValueQuestionTypeChoice;
    private int questionId = -1;
    private List<Answer> lstAnswers = new List<Answer>();
    private List<AnswerForm> answerForms = new List<AnswerForm>();
    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; }

    protected override async Task OnInitializedAsync()
    {
        lstQuestion = await _serQuestion.GetAllQuestions();
        lstQuestionType = await _serQuestionType.GetAllQuestionTypes();
    }

    private async Task ChangeValue()
    {
        IsDisableNewAnswer = false;
    }

    private async Task AddNewAnswer()
    {
        if (lstAnswers.Count == 0 || await answerForms.Last().ValidateAsync())
        {
            var newAnswer = new Answer();
            lstAnswers.Add(newAnswer);
            answerForms.Add(new AnswerForm { answer = newAnswer });
        }
    }

    private void RemoveAnswerForm(Answer answerToRemove)
    {
        var index = lstAnswers.IndexOf(answerToRemove);
        if (index >= 0)
        {
            lstAnswers.RemoveAt(index);
            answerForms.RemoveAt(index);
        }
    }

    // private void HandleAnswerChange(Answer updatedAnswer)
    // {
    //     // Tìm và cập nhật câu trả lời trong danh sách
    //     var answer = answers.FirstOrDefault(a => a == updatedAnswer);
    //     if (answer != null)
    //     {
    //         answer.Content = updatedAnswer.Content;
    //         answer.IsCorrect = updatedAnswer.IsCorrect;
    //     }
    // }

    // private bool IsLastAnswerFilled()
    // {
    //     var lastAnswer = answers.LastOrDefault();
    //     return lastAnswer != null && !string.IsNullOrWhiteSpace(lastAnswer.Content);
    // }

    private async Task Submit()
    {
        if (questionId == -1)  
        {
            snackbar.Add("Chưa chọn câu hỏi", Severity.Warning);
            return;
        }
        else if (answerForms.Count == 0 || answerForms == null)
        {
            snackbar.Add("Chưa nhập đáp án", Severity.Warning);
            return;
        }

        bool allValid = true;

        foreach (var form in answerForms)
        {
            if (!await form.ValidateAsync())
            {
                allValid = false;
            }
        }

        if (allValid)
        {

            for (int i = 0; i < lstAnswers.Count; i++)
            {
                lstAnswers[i].Status = true;
                var check = await _serAnswer.Create(lstAnswers[i]);
            }

            var question = await _serQuestion.UpdateStatus(questionId, true);
            MudDialog.Close(DialogResult.Ok(true));
            snackbar.Add("Thêm thành công", Severity.Success);
        }
        else
        {
            snackbar.Add("Có đáp án chưa được điền đủ thông tin", Severity.Error);            
        }
    }

    private void Cancel() => MudDialog.Cancel();
}
