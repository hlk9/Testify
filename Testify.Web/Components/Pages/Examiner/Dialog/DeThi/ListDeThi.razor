@using Testify.API.DTOs
@using Testify.DAL.Context
@using Testify.DAL.ViewModels
@layout AdminLayout
@inject IDialogService DialogService
@inject ExamService examService
@inject SubjectService subjectService
@inject ExamDetailService examdetailService

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">Danh sách đề thi </MudText>
    </TitleContent>
    <DialogContent>
       <MudGrid>
            <MudItem xl="10" lg="9" md="8" sm="7" xs="12">
            </MudItem>
            <MudItem xl="2" lg="3" md="4" sm="5" xs="12">
                <MudButton OnClick="@(() => OpenDialogAsync(_maxWidth, subjectCurrent.Id))" Class="add-button-end" Variant="Variant.Filled">Thêm đề mới </MudButton>
            </MudItem>
       </MudGrid>

        <div class="bg-white rounded-3 mb-4" style="width:100%; margin-top:10px;">

            <MudTable Items="@lisDThi" Dense="true" Hover="true" Virtualize="true" FixedHeader="true" HorizontalScrollbar="true" Height="500px">

                <ToolBarContent>
                    <MudGrid Style="align-items:center;padding:0px; margin:0;width:100%">
                        <MudItem xl="6" lg="6" md="6" sm="4" xs="12" Style="padding:0px; margin:0;">
                            <MudText Style="font-size: 22px; font-weight: bold;color:#29a69a">Danh sách đề thi</MudText>

                        </MudItem>
                        <MudItem xl="6" lg="6" md="6" sm="8" xs="12" Style="padding:0px; margin:0;">
                            <MudTextField T="string" Placeholder="Search" Adornment="Adornment.Start"
                           AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                        </MudItem>
                    </MudGrid>
                </ToolBarContent>
                <HeaderContent>
                    <MudTh><MudTableSortLabel SortLabel="ID" T="string">Mã đề</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortLabel="Môn" T="string">Môn</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortLabel="Người tạo" T="string">Người tạo</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortLabel="Công khai" T="bool">Công khai</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortLabel="Ngày tạo" T="string">Ngày tạo</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortLabel="Ngày Cập Nhật" T="string">Ngày cập nhật</MudTableSortLabel></MudTh>
                    <MudTh><MudTableSortLabel SortLabel="Thao tác" T="string">Thao tác</MudTableSortLabel></MudTh>

                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="ID"> @context.Id</MudTd>
                    <MudTd DataLabel="Môn">
                        @* <MudAutocomplete T="Subject"
                                         @bind-Value="subjectCurrent"
                                         SearchFunc="@SearchSubject"
                                         Variant="Variant.Outlined"
                                         Label="Môn"
                                         Placeholder="Chọn môn"
                                         Clearable="true"
                                         ToStringFunc="@(e=> e==null?null : $"{e.Name}")"
                                         OnFocus="SubjectChanged" /> *@
                            @subjectCurrent.Name
                    </MudTd>
                    <MudTd DataLabel="Người tạo"> @context.CreateBy</MudTd>
                    <MudTd DataLabel="Công khai"> 
                        @if (context.Status == 0)
                        {
                            <span class="text-center btn btn-danger">Chỉ mình tôi </span>
                        }
                        else
                        {
                            <span class="text-center btn btn-success">Công khai </span>
                        }
                        
                    </MudTd>
                    <MudTd DataLabel="Ngày tạo"> @context.CreateDate.ToString("dd/MM/yyyy")</MudTd>
                    <MudTd DataLabel="Ngày Cập Nhật">@context.UpdateDate.ToString("dd/MM/yyyy")</MudTd>
                    <MudTd DataLabel="Thao tác">
                        <MudTooltip Text="Sửa">
                            <MudIconButton  Icon="@Icons.Material.Filled.BorderColor" aria-label="update"></MudIconButton>
                        </MudTooltip>
                        <MudTooltip Text="Chi tiết">
                            <MudIconButton  Icon="@Icons.Material.Filled.Notes" aria-label="details"></MudIconButton>
                        </MudTooltip>
                        <MudTooltip Text="Xoá">
                            <MudIconButton Icon="@Icons.Material.Filled.Delete" aria-label="delete"></MudIconButton>
                        </MudTooltip>
                    </MudTd>
                </RowTemplate>
                <NoRecordsContent>
                    <MudText>No matching records found</MudText>
                </NoRecordsContent>
                <LoadingContent>
                    <MudText>Loading...</MudText>
                </LoadingContent>
                <PagerContent>
                    <MudTablePager />
                </PagerContent>
            </MudTable>
        </div>

    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Đóng/Huỷ</MudButton>
      
    </DialogActions>
</MudDialog>
    
@code {


    [Parameter]
    public int Id { get; set; }
    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; }
    [Inject] ISnackbar Snackbar { get; set; }
    private List<Exam> listExam;
    private List<Subject> listSubject;
    private Exam examCurrent;
    private Subject subjectCurrent;

    private void Cancel() => MudDialog.Cancel();
    private readonly DialogOptions _maxWidth = new() { MaxWidth = MaxWidth.Large, FullWidth = true };


    private async Task OpenDialogAsync(DialogOptions options, int ID_Sub)
    {
        var parameters = new DialogParameters
        {
              // { "Id", ID_Sub },
              { "Id_Sub", ID_Sub }
        };
        
        var dialog = await DialogService.ShowAsync<Dialog.DeThi.CreateDeThi>("Options Dialog", parameters, options);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            // listSchedule = await scheduleService.GetInforBasic();
            // _lstDT = await examService.GetInforBasic();

        }
       

    }

    private async Task<IEnumerable<Subject>> SearchSubject(string value, CancellationToken token)
    {

        listSubject = await subjectService.GetAllSub(null, true);


        if (string.IsNullOrEmpty(value))
            return listSubject;

        return listSubject.Where(x => x.Name.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }
    private async Task SubjectChanged()
    {
        listExam = await examService.GetListOfSubject(subjectCurrent.Id);
        examCurrent = null;
        StateHasChanged();

    }


    private List<ExamDetail> lisDThi = new List<ExamDetail>();
    private List<Dethi> lst = new List<Dethi>();

    protected override async Task OnInitializedAsync()
    {
        lisDThi = await examdetailService.GetExamDetailByExamId(Id);

        
        var examId = lisDThi.FirstOrDefault().ExamId;
        var exam = await examService.GetExamId(examId);
        subjectCurrent = await subjectService.GetSubId((int)exam.SubjectId);
    }
    

}
