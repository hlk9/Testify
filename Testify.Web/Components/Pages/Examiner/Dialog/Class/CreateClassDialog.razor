@using Testify.DAL.ViewModels
@using Testify.Web.Data.Commons
@using Testify.Web.Shared
<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Class="mr-3 mb-n1" />
            Thêm mới lớp học
        </MudText>
    </TitleContent>
    <DialogContent>
        @if(isLoading)
        {
            <LoadingContext />
        }
        else
        {
            <MudForm Spacing="4" Model="@classes" @ref="@form">
                <div>
                    <MudTextField For="@(() => classes.Name)" Style="padding: 0" T="string" Label="Tên lớp học" @bind-Value="classes.Name" />
                </div>

                <div>
                    <MudNumericField For="@(() => classes.Capacity)" Style="padding: 0" T="int" Label="Số Lượng" @bind-Value="classes.Capacity" />
                </div>

                <div>
                    <MudTextField For="@(() => classes.Description)" Style="padding: 0" T="string" Label="Mô tả" @bind-Value="classes.Description" />
                </div>

                <MudSelect T="Guid" @bind-Value="teacherId" Label="Giáo viên quản lý" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">
                    @if (teacherId == Guid.Empty)
                    {
                        <MudSelectItem Value="Guid.Empty">Không có giảng viên nào!</MudSelectItem>
                    }
                    else
                    {
                        @foreach (var itemLevel in _lstTeacher)
                        {
                            <MudSelectItem Value="@itemLevel.Id">@itemLevel.FullName</MudSelectItem>
                        }
                    }
                </MudSelect>

                <MudSelect T="int" @bind-Value="subjectId" Label="Môn Học" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">
                    @if (subjectId == -1)
                    {
                        <MudSelectItem Value="-1">Không có giảng viên nào!</MudSelectItem>
                    }
                    else
                    {
                        @foreach (var itemName in _lstSubject)
                        {
                            <MudSelectItem Value="@itemName.Id">@itemName.Name</MudSelectItem>
                        }
                    }
                </MudSelect>
            </MudForm>
        }
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Surface" Variant="@Variant.Filled" OnClick="Cancel">Hủy</MudButton>
        <MudButton Color="Color.Primary" Variant="@Variant.Filled" OnClick="Submit">Tạo</MudButton>
    </DialogActions>
</MudDialog>
@code {
    MudForm form;
    private Class classes { get; set; } = new();
    private List<User> _lstTeacher;
    private List<Subject> _lstSubject;
    private List<ClassWithUser> _lstClass;
    private Guid teacherId = Guid.Empty;
    private int subjectId = -1;
    private bool isLoading { get; set; } = true;
    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await Loaddata("");
    }

    private async Task Loaddata(string? textSearch)
    {
        _lstTeacher = await _serLec.GetAllTeacher();
        if (_lstTeacher.Any())
        {
            teacherId = _lstTeacher[0].Id;
        }
        else
        {
            teacherId = Guid.Empty;
        }
        _lstSubject = await _serSub.GetAllSub(textSearch, true);
        if(_lstSubject.Any())
        {
            subjectId = _lstSubject[0].Id;
        }
        else
        {
            subjectId = -1;
        }
        _lstClass = await _serClass.GetAllClass(textSearch, true);
        isLoading = false;
    }

    private bool ValidateForm()
    {
        int count = 0;
        if (classes.Name == null || classes.Name.Trim().Length == 0)
        {
            snackbar.Add("Nội dung trống", Severity.Error);
            count += 1;
        }
        if (classes.Description == null || classes.Description.Trim().Length == 0)
        {
            snackbar.Add("Nội dung trống", Severity.Error);
            count += 1;
        }
        if (classes.Capacity < 10)
        {
            snackbar.Add("Số lượng tối thiểu 10", Severity.Error);
            count += 1;
        }
        if(teacherId == Guid.Empty || teacherId == null)
        {
            snackbar.Add("Chưa chọn giáo viên", Severity.Error);
            count += 1;
        }
        if (subjectId == -1 || subjectId == null)
        {
            snackbar.Add("Chưa chọn môn", Severity.Error);
            count += 1;
        }
        if(count > 0)
        {
            return true;
        }
        return false;
    }

    public string GenerateRandomString()
    {
        const string chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
        Random random = new Random();
        return new string(Enumerable.Repeat(chars, 6)
                                    .Select(s => s[random.Next(s.Length)]).ToArray());
    }

    private async Task Submit()
    {
        bool classExists = _lstClass.Any(c => c.Name == classes.Name);
        if(classExists)
        {
            snackbar.Add("Lớp học đã tồn tại!", Severity.Error);
            return;
        }

        var checkValidation = ValidateForm();

        if (!checkValidation)
        {
            classes.Status = Convert.ToByte(StatusType.isActive);
            classes.TeacherId = teacherId;
            classes.SubjectId = subjectId;
            classes.ClassCode = GenerateRandomString();
            var checkAddClass = await _serClass.CreateClass(classes);
            if(checkAddClass != null)
            {
                MudDialog.Close(DialogResult.Ok(true));
                snackbar.Add("Thêm thành công", Severity.Success);
            }
            else
            {
                MudDialog.Close(DialogResult.Ok(true));
                snackbar.Add("Thêm thất bại", Severity.Error);
            }
        }
    }

    private void Cancel() => MudDialog.Cancel();
}
