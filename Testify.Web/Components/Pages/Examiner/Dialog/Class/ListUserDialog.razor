@using SendGrid;
@using SendGrid.Helpers.Mail;
@using Testify.Web.Data.Commons
@using Testify.Web.Shared
@using Testify.DAL.ViewModels
@inject IDialogService DialogService
@inject CommonServices commonServices


<MudDialog>
    <TitleContent>
        <MudText Style="font-size: 18px; font-weight: bold; text-transform: uppercase">Quản lý sinh viên trong lớp</MudText>
    </TitleContent>

    <DialogContent>
        <MudTabs Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6">

            <MudTabPanel OnClick="@(() => ViewList(searchValue))" Text="Danh sách sinh viên">
                <MudTextField T="string" Placeholder="Tìm kiếm tên học sinh, sinh viên" Adornment="Adornment.Start" @bind-Value="searchValue"
                              AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0" TextChanged="onChangeSearch" Immediate="true"></MudTextField>
                @if (isLoading)
                {
                    <LoadingContext />
                }
                else
                {
                    <MudTable Elevation="1" @ref="_table" T="User" Items="@Users" Height="300px">
                        <HeaderContent>
                            <MudTh>Tên</MudTh>
                            <MudTh>Giới tính</MudTh>
                            <MudTh>Email</MudTh>
                            <MudTh>Thao Tác</MudTh>
                        </HeaderContent>
                        <RowTemplate>

                            <MudTd DataLabel="Name">@context.FullName</MudTd>
                            <MudTd DataLabel="Sex">@(context.Sex == false ? "Nam" : "Nữ")</MudTd>
                            <MudTd DataLabel="Email">@context.Email</MudTd>
                            <MudTd>
                                <MudButton Color="Color.Surface" OnClick="@(()=> OpenDialogAsync(_maxWidth,OpenDialogType.Detail,context.Id))">
                                    Chi Tiết
                                </MudButton>
                                <MudButton Color="Color.Primary" OnClick="@(() => DeleteUser(context.Id))">
                                    Xoá
                                </MudButton>
                            </MudTd>

                        </RowTemplate>
                        <NoRecordsContent>
                            <MudText>Không có học sinh nào trong lớp</MudText>
                        </NoRecordsContent>
                        <PagerContent>
                            <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100 }" />
                        </PagerContent>
                    </MudTable>
                }
            </MudTabPanel>
            <MudTabPanel Text="Thêm Sinh Viên">
                <MudTextField T="string" Placeholder="Tìm kiếm tên học sinh, sinh viên" Adornment="Adornment.Start" @bind-Value="searchStudent"
                              AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0" TextChanged="onChangeSearch1" Immediate="true"></MudTextField>
                @if (isLoading)
                {
                    <LoadingContext />
                }
                else
                {
                    <MudTable Elevation="1" Items="@Students" MultiSelection="true" Dense="true" FixedHeader="true" HorizontalScrollbar="true" Height="300px" @bind-SelectedItems="@listUserSelected">
                        
                        <HeaderContent>
                            <MudTh>Tên sinh viên</MudTh>
                            <MudTh>Giới tính</MudTh>
                            <MudTh>Email</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd DataLabel="Tên sinh viên">@context.FullName</MudTd>
                            <MudTd DataLabel="Sex">@(context.Sex == false ? "Nam" : "Nữ")</MudTd>
                            <MudTd DataLabel="Email">@context.Email</MudTd>
                        </RowTemplate>
                        <NoRecordsContent>
                            <MudText></MudText>
                        </NoRecordsContent>
                        <LoadingContent>
                            <MudText>Đang tải...</MudText>
                        </LoadingContent>
                        <PagerContent>
                            <MudTablePager />
                        </PagerContent>
                    </MudTable>

                    <MudPaper Elevation="0" Class="bg-transparent w-100 text-end pt-3">
                        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="Submit">Xếp thí sinh</MudButton>
                    </MudPaper>
                }

            </MudTabPanel>
            <MudTabPanel Text="Chờ Xác Nhận">
                @if (isLoading)
                {
                    <LoadingContext />
                }
                else
                {
                    <MudTable @ref="_tableConfirm" T="User" Items="@UsersConfirm" Height="300px">
                        <HeaderContent>
                            <MudTh>Name</MudTh>
                            <MudTh>Sex</MudTh>
                            <MudTh>Email</MudTh>
                            <MudTh>Thao Tác</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd DataLabel="Name">@context.FullName</MudTd>
                            <MudTd DataLabel="Sex">@(context.Sex == false ? "Nam" : "Nữ")</MudTd>
                            <MudTd DataLabel="Email">@context.Email</MudTd>
                            <MudTd>
                                <MudButton Color="Color.Primary" OnClick="@(() => ConfirmUser(context.Id))">
                                    Xác Nhận
                                </MudButton>
                                <MudButton Color="Color.Error" OnClick="@(() => RefuseUser(context.Id))">
                                    Từ Chối
                                </MudButton>
                            </MudTd>
                        </RowTemplate>
                        <NoRecordsContent>
                            <MudText></MudText>
                        </NoRecordsContent>
                        <LoadingContent>
                            <MudText>Đang tải...</MudText>
                        </LoadingContent>
                        <PagerContent>
                            <MudTablePager />
                        </PagerContent>
                    </MudTable>
                }
            </MudTabPanel>
        </MudTabs>
    </DialogContent>
</MudDialog>


@code {
    private bool isLoading { get; set; } = true;
    private string email;
    [Parameter]
    public int ClassId { get; set; }
    [Parameter]
    public Guid idUser { get; set; }
    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; }
    private List<User> _lstUser;
    Guid userId = Guid.NewGuid();
    private List<ClassUser> UsersConfirmClick = new List<ClassUser>();
    private IEnumerable<User> Users = new List<User>();
    private IEnumerable<User> UsersConfirm = new List<User>();
    private MudTable<User> _table;
    private MudTable<User> _tableConfirm;
    private string searchValue = "";
    private string searchStudent = "";
    private List<User> Students = new List<User>();
    private List<User> SelectedUsers = new List<User>();
    public HashSet<User> listUserSelected { get; set; }

    private async Task onChangeSearch()
    {
        await LoadData(searchValue);
    }

    private async Task onChangeSearch1()
    {
        await LoadData(searchStudent);
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadData("");
    }

    private async Task LoadData(string? textSearch)
    {
        Users = await _serUser.GetUsersWithStatus(ClassId, textSearch) ?? new List<User>();
        Students = await _serUser.GetUsersNotInClassAsync(ClassId, textSearch);
        UsersConfirm = await _serUser.GetUsersWithStatusTwo(ClassId) ?? new List<User>();
        isLoading = false;
    }

    private async Task ViewList(string? textSearch)
    {
        Users = await _serUser.GetUsersWithStatus(ClassId, textSearch) ?? new List<User>();
        Students = await _serUser.GetUsersNotInClassAsync(ClassId, textSearch);
        await LoadData("");
    }

    private async Task ConfirmUser(Guid userId)
    {
        ClassUser classUser = new ClassUser()
            {
                ClassId = ClassId,
                UserId = userId,
                Status = 1
            };

        var addSuccess = await _serClassUser.UpdateStatus(classUser);
        if (addSuccess != null)
        {
            snackbar.Add("Thêm thành công");
            await SendEmail(userId);
            MudDialog.Close(DialogResult.Ok(true));
        }
        else
        {
            snackbar.Add("Thêm thất bại");
        }
    }

    private async Task RefuseUser(Guid userId)
    {
        var check = await _serClassUser.DeleteUserInClass(userId, ClassId);
        if (check != null)
        {
            snackbar.Add("Từ chối thành công");
            MudDialog.Close(DialogResult.Ok(true));
        }
        else
        {
            snackbar.Add("Từ chối thất bại");
        }
    }

    private async Task DeleteUser(Guid userId)
    {
        var check = await _serClassUser.DeleteUserInClass(userId, ClassId);
        if (check != null)
        {
            snackbar.Add("Xoá thành công");
            MudDialog.Close(DialogResult.Ok(true));
        }
        else
        {
            snackbar.Add("Xoá thất bại");
        }
    }

    private async Task SendEmail(Guid userId)
    {
        var mailUser = await _serUser.GetByidUser(userId);

        List<EmailAddress> emails = new List<EmailAddress>();
        emails.Add(new EmailAddress { Email = mailUser.Email});
        string content = "Em đã được thêm mới vào lớp học";
        await commonServices.sendEmail(emails, "Thông Báo", content, null);
    }

    private async Task Submit()
    {
        if(listUserSelected.Count == 0 || listUserSelected == null)
        {
            snackbar.Add("Chưa chọn học sinh nào", Severity.Error);
            return;
        }

        var a = await _serClass.GetAllClass("", true);

        var compare = a.Where(x => x.Id == ClassId).Select(x => new
        {
            x.Capacity,
            x.CountUser,
        }).FirstOrDefault();

        if (compare.CountUser + listUserSelected.Count > compare.Capacity)
        {
            snackbar.Add("Vượt quá số học sinh cho phép", Severity.Error);
            return;
        }

        foreach (var item in listUserSelected)
        {
            ClassUser classUser = new ClassUser
                {
                    Status = 1,
                    UserId = item.Id,
                    ClassId = ClassId
                };

            var checkAddClassUser = await _serClassUser.CreateClassUser(classUser);
        }
        listUserSelected.Clear();

        snackbar.Add("Thêm thành công", Severity.Success);
        MudDialog.Close(DialogResult.Ok(true));
       
        await LoadData("");
    }


    private void Cancel()
    {
        MudDialog.Close(DialogResult.Ok(true));
    }

    private readonly DialogOptions _maxWidth = new() { MaxWidth = MaxWidth.Large, FullWidth = true };

    private async Task OpenDialogAsync(DialogOptions options, string name, Guid id)
    {
        var dialogParametersDetail = new DialogParameters<Dialog.Class.DetailUserInListDialog>
        {
            {x => x.UserId, id}
        };

        if (name.Equals(OpenDialogType.Detail))
        {
            var dialog = await DialogService.ShowAsync<Dialog.Class.DetailUserInListDialog>("Options Dialog", dialogParametersDetail, options);
            var result = await dialog.Result;
            if (!result.Canceled)
            {
                await LoadData("");
            }
        }
    }
}
