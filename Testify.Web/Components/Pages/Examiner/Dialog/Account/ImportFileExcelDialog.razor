@using OfficeOpenXml
<MudDialog>
    <TitleContent>
        <MudText Style="font-size: 18px; font-weight: bold; text-transform: uppercase">Tạo mới tài khoản bằng file excel</MudText>
    </TitleContent>
    <DialogContent>

        <MudPaper Class="my-3" Elevation="0">
            <MudSelect T="int" @bind-Value="levelId" Label="Vui lòng chọn chức vụ" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter" >

                @foreach (var item in _lstLevel)
                {
                    <MudSelectItem Value="@item.Id">@item.Name</MudSelectItem>
                }
            </MudSelect>
        </MudPaper>

        <MudPaper Elevation="0" Class="bg-transparent py-4 d-flex justify-content-between align-items-center gap-3">
            <MudTextField T="string" @bind-Value="@nameFileCurrent"></MudTextField>
            <MudFileUpload T="IBrowserFile" Accept=".xlsx, .xls" FilesChanged="UploadFileExcel">
                <ActivatorContent>
                    <MudFab StartIcon="@Icons.Material.Filled.FileUpload"
                            Label="File Excel" />
                </ActivatorContent>
            </MudFileUpload>
        </MudPaper>
        <MudPaper Elevation="0" Class="d-flex justify-content-start gap-2 align-items-center flex-wrap">
            <MudText>Vui lòng soạn câu hỏi đúng với định dạng:</MudText> <MudButton Class="bg-success text-white my-3" OnClick="ExportTemPlateQuestion">Tải file mẫu</MudButton>
        </MudPaper>


        <MudPaper Elevation="0" Class="pt-3 text-end">
            <MudButton OnClick="Cancel">Cancel</MudButton>
            <MudButton Color="Color.Primary" OnClick="@(() =>Submit())">Thêm mới</MudButton>
        </MudPaper>
    </DialogContent>

</MudDialog>

@code {

    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; }
    private void Cancel() => MudDialog.Cancel();

    private string[] allowFileUpload = { ".xlsx", ".xls" };
    private string nameFileCurrent;
    private IBrowserFile selectFileCurrent;
    private int countAccount = 0;
    private List<User> _lstUser;
    private Guid userId;
    private User user { get; set; } = new();
    private JSRuntime jsruntime;
    private bool isLoading { get; set; } = true;

    [Inject]
    private IDialogService _mudDialogServices { get; set; }

    private List<AccountExcel>? _lstAccountFromExcel;
    private int levelId = 1;
    private List<Level> _lstLevel = new List<Level>();

    private async Task UploadFileExcel(IBrowserFile file)
    {
        if (file == null)
        {
            return;
        }
        var contentAfterDotLast = Path.GetExtension(file.Name);

        if (!allowFileUpload.Contains(contentAfterDotLast))
        {
            snackbar.Add("Dạng file không đúng. Chỉ nhận file excel!", Severity.Error);
            return;
        }

        nameFileCurrent = file.Name;
        selectFileCurrent = file;
    }

    private async Task Submit()
    {

            try
            {
                isLoading = true;
            if (selectFileCurrent == null)
                {
                    snackbar.Add("Chưa chọn file excel!", Severity.Error);
                    return;
                }

                var check = await _serviceUser.ImportExcelUser(selectFileCurrent, levelId);
                snackbar.Add($"Thêm tài khoản thành công, trong đó có {check} không thêm được", Severity.Info);
                MudDialog.Close(DialogResult.Ok(true));
            }
            catch (Exception ex)
            {
                snackbar.Add($"Đã xảy ra lỗi: {ex.Message}", Severity.Error);
            }
            finally
            {
                isLoading = false;
            }


    }

    protected override async Task OnInitializedAsync()
    {
        _lstLevel = await _serLevel.GetAllLevel();
        if (_lstLevel.Any())
        {
            levelId = _lstLevel[0].Id;
        }
    }

    private async Task<IEnumerable<Level>> SearchLevel(string value, CancellationToken token)
    {
        if (string.IsNullOrEmpty(value))
            return _lstLevel;

        return _lstLevel.Where(x => x.Name.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }


    private async Task ExportTemPlateQuestion()
    {
        var response = await _serQuestion.ExportExcelQuestion();

        if (response.IsSuccessStatusCode)
        {
            var fileContent = await response.Content.ReadAsByteArrayAsync();
            var fileName = "Template_Question_LVT.xlsx";
            var fileUrl = $"data:application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;base64,{Convert.ToBase64String(fileContent)}";
            await jsruntime.InvokeVoidAsync("downloadFile", fileUrl, fileName);
        }
    }


    private bool ValidationForm()
    {
        int count = 0;
        if (user.FullName == null || user.FullName.Trim().Length == 0)
        {
            snackbar.Add("Họ và tên trống!", Severity.Error);
            count += 1;
        }
        if (user.UserName == null)
        {
            snackbar.Add("Tên tài khoản trống trống!", Severity.Error);
            count += 1;
        }
        if (user.DateOfBirth == null || user.DateOfBirth == DateTime.Now)
        {
            snackbar.Add("Ngày sinh không hơp lệ hoặc trống", Severity.Error);
            count += 1;
        }
        if (user.PhoneNumber == null)
        {
            snackbar.Add("Số điện thoại trống!", Severity.Error);
            count += 1;

        }
        if (user.Address == null || user.Address.Trim().Length == 0)
        {
            snackbar.Add("Địa chỉ trống!", Severity.Error);
            count += 1;

        }
        if (user.Email == null)
        {
            snackbar.Add("Email trống!", Severity.Error);
            count += 1;

        }
        if (user.PasswordHash == null)
        {
            snackbar.Add("Mật khẩu trống!", Severity.Error);
            count += 1;

        }
        if (count > 0)
        {
            return true;
        }

        return false;
    }


    private class AccountExcel()
    {
        public string FullName { get; set; }
        public string UserName { get; set; }
        public string PhoneNumber { get; set; }
        public string DateOfBirth { get; set; }
        public string Address { get; set; }
        public string Email { get; set; }
        public string PasswordHash { get; set; }



    }
}

<script>
    window.downloadFile = function (url, fileName) {
        const link = document.createElement('a');
        link.href = url;
        link.download = fileName;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    }
</script>

