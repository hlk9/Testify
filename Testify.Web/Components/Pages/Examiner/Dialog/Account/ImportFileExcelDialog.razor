@using OfficeOpenXml
<MudDialog>
    <TitleContent>
        <MudText Style="font-size: 18px; font-weight: bold; text-transform: uppercase">Tạo mới tài khoản bằng file excel</MudText>
    </TitleContent>
    <DialogContent>
        <MudPaper Elevation="0" Class="bg-transparent py-4 d-flex justify-content-between align-items-center gap-3">
            <MudTextField T="string" @bind-Value="@nameFileCurrent"></MudTextField>
            <MudFileUpload T="IBrowserFile" Accept=".xlsx, .xls" FilesChanged="UploadChange">
                <ActivatorContent>
                    <MudFab StartIcon="@Icons.Material.Filled.FileUpload"
                            Label="File Excel" />
                </ActivatorContent>
            </MudFileUpload>
        </MudPaper>
        <MudPaper Elevation="0" Class="bg-transparent mt-3">
            @if (_lstAccountFromExcel != null)
            {
                <MudTable Items="@_lstAccountFromExcel" Dense="true" Virtualize="true" FixedHeader="true" HorizontalScrollbar="true">
                    <RowTemplate>
                        <MudTd DataLabel="Họ và tên" hidden>@context.FullName</MudTd>
                        <MudTd DataLabel="Tên tài khoản">@context.UserName</MudTd>
                        <MudTd DataLabel="Số điện thoại">@context.PhoneNumber</MudTd>
                        <MudTd DataLabel="Ngày sinh">@context.DateOfBirth</MudTd>
                        <MudTd DataLabel="Địa chỉ">@context.Address</MudTd>
                        <MudTd DataLabel="Email">@context.Email</MudTd>
                        <MudTd DataLabel="Mật khẩu">@context.PasswordHash</MudTd>
                        @* <MudTd DataLabel="Chức vụ">@context.LevelId</MudTd> *@
                    </RowTemplate>

                    <NoRecordsContent>
                        <MudText>No Data</MudText>
                    </NoRecordsContent>
                    <PagerContent>
                        <MudTablePager />
                    </PagerContent>
                </MudTable>
            }
        </MudPaper>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" OnClick="@(() => Submit(true))">Thêm mới</MudButton>
    </DialogActions>
</MudDialog>

@code {

    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; }
    private void Cancel() => MudDialog.Cancel();

    private string[] allowFileUpload = { ".xlsx", ".xls" };
    private string nameFileCurrent;
    private IBrowserFile selectFileCurrent;
    private int countAccount = 0;

    [Inject]
    private IDialogService _mudDialogServices { get; set; }

    private List<AccountExcel>? _lstAccountFromExcel;
    private Level levelId;
    private List<Level> _lstLevel;

    private async Task UploadChange(IBrowserFile file)
    {
        if (file == null)
        {
            return;
        }
        var contentAfterDotLast = Path.GetExtension(file.Name);

        if (!allowFileUpload.Contains(contentAfterDotLast))
        {
            snackbar.Add("Dạng file không đúng. Chỉ nhận file excel!", Severity.Error);
            return;
        }

        nameFileCurrent = file.Name;
        selectFileCurrent = file;
    }

    private async Task Submit(bool isSubmit)
    {
        int countUser = 0;
        if (selectFileCurrent == null)
        {
            snackbar.Add("Chưa có file nào được chọn", Severity.Error);
            return;
        }

        var lstUserChecked = await _serLec.ImportExcelUser(selectFileCurrent);

        if (isSubmit == true)
        {
            var isSuccessCreate = await _serLec.CreateUserInExcelImport(lstUserChecked);
            if (isSuccessCreate.IsSuccessStatusCode)
            {
                MudDialog.Close(DialogResult.Ok(true));
                snackbar.Add("Thêm tài khoản thành công", Severity.Success);
            }
            else
            {
                MudDialog.Close(DialogResult.Ok(true));
                snackbar.Add("Thêm tài khoảng thất bại", Severity.Error);
            }
        }
        else
        {
            snackbar.Add("Không có câu hỏi nào để import", Severity.Warning);
        }

    }

    protected override async Task OnInitializedAsync()
    {
        _lstLevel = await _serLevel.GetAllLevel();
        if (_lstLevel.Any())
        {
            levelId = _lstLevel[0];
        }
    }

    private async Task<IEnumerable<Level>> SearchLevel(string value, CancellationToken token)
    {
        if (string.IsNullOrEmpty(value))
            return _lstLevel;

        return _lstLevel.Where(x => x.Name.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }
    private class AccountExcel()
    {
        public string FullName { get; set; }
        public string UserName { get; set; }
        public string PhoneNumber { get; set; }
        public string DateOfBirth { get; set; }
        public string Address { get; set; }
        public string Email { get; set; }
        public string PasswordHash { get; set; }



    }
}

