@using MudBlazor
@using Testify.DAL.Models
<MudDialog>
    <TitleContent>
        <MudText Style="font-size: 18px; font-weight: bold; text-transform: uppercase">THÊM MỚI TÀI KHOẢN</MudText>
    </TitleContent>
    <DialogContent>
        <MudTabs ApplyEffectsToContainer="true">
            <MudTabPanel Text="Thêm mới">
                <MudForm Spacing="3" Model="@users">
                    @*         <MudTextField T="Guid" @bind-Value="@users.Id" Label="Mã tài khoản" /> *@
                    <MudTextField T="string" @bind-Value="@users.FullName" Label="Họ và tên" />
                    <MudDatePicker @bind-Value="@users.DateOfBirth" Label="Ngày sinh" />
                    <MudTextField T="string" @bind-Value="@users.PhoneNumber" Label="Số điện thoại" />
                    <MudTextField T="string" @bind-Value="@users.Address" Label="Địa chỉ" />
                    @*       <MudTextField T="int" @bind-Value="@users.LevelId" Label="Level"  /> *@
                    <MudSelect T="int" @bind-Value="@users.LevelId" Label="Level">
                        <MudSelectItem Value="1">Admin</MudSelectItem>
                        <MudSelectItem Value="2">Khảo thí</MudSelectItem>
                        <MudSelectItem Value="3">Giáo viên</MudSelectItem>
                        <MudSelectItem Value="4">Sinh viên</MudSelectItem>
                    </MudSelect>
                    <MudTextField T="string" @bind-Value="@users.UserName" Label="Tên tài khoản" />
                    <MudTextField T="string" @bind-Value="@users.Email" Label="Email" />
                    <MudTextField T="string" @bind-Value="@users.PasswordHash" Label="PasswordHash" />
                    <MudTextField T="bool" @bind-Value="@users.Sex" Label="Giới tính" />
                    @*             <MudTextField T="DateTime?" @bind-Value="@users.LastLogin" Label="Lần cuối đăng nhập" /> *@
                    @* <MudTextField T="byte" @bind-Value="@users.Status" Label="Trạng thái" /> *@
                </MudForm>
                <MudPaper Elevation="0" Class="pt-3 text-end">
                    <MudButton OnClick="Cancel">Đóng</MudButton>
                    <MudButton Color="Color.Primary" OnClick="@(() =>Submit(false))">Lưu câu hỏi</MudButton>
                </MudPaper>
            </MudTabPanel>
            <MudTabPanel Text="Thêm bằng excel">

                <MudPaper Class="my-3" Elevation="0">
                    <MudSelect T="int" @bind-Value="levelId" Label="Vui lòng chọn chức vụ" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">
                        @if (levelId == -1)
                        {
                            <MudSelectItem Value="-1">Chọn chức vụ</MudSelectItem>
                        }
                        @foreach (var item in _lstLevel)
                        {
                            <MudSelectItem Value="@item.Id">@item.Name</MudSelectItem>
                        }
                    </MudSelect>
                </MudPaper>

                <MudPaper Elevation="0" Class="bg-transparent py-4 d-flex justify-content-between align-items-center gap-3">
                    <MudTextField T="string" @bind-Value="@nameFileCurrent"></MudTextField>
                    <MudFileUpload T="IBrowserFile" Accept=".xlsx, .xls" FilesChanged="UploadFileExcel">
                        <ActivatorContent>
                            <MudFab StartIcon="@Icons.Material.Filled.FileUpload"
                                    Label="File Excel" />
                        </ActivatorContent>
                    </MudFileUpload>
                </MudPaper>
                <MudPaper Elevation="0" Class="d-flex justify-content-start gap-2 align-items-center flex-wrap">
                    <MudText>Vui lòng soạn câu hỏi đúng với định dạng:</MudText> <MudButton Class="bg-success text-white my-3" OnClick="ExportTemPlateQuestion">Tải file mẫu</MudButton>
                </MudPaper>


                <MudPaper Elevation="0" Class="pt-3 text-end">
                    <MudButton OnClick="Cancel">Cancel</MudButton>
                    <MudButton Color="Color.Primary" OnClick="@(() =>Submit(true))">Thêm mới</MudButton>
                </MudPaper>
            </MudTabPanel>
                    

        </MudTabs>
        
    </DialogContent>
</MudDialog>
@code {
    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; }

    [Parameter]
    public Guid UserId { get; set; }
    private User users { get; set; } = new();
    public List<User> _lstUsers;
    private void Cancel() => MudDialog.Cancel();

    private string[] allowFileUpload = { ".xlsx", ".xls" };
    private string nameFileCurrent;
    private IBrowserFile selectFileCurrent;
    private int countAccount = 0;
    private JSRuntime jsruntime;
    private bool isLoading { get; set; } = true;

    [Inject]
    private IDialogService _mudDialogServices { get; set; }

    private int levelId = -1;
    private List<Level> _lstLevel = new List<Level>();

    private async Task UploadFileExcel(IBrowserFile file)
    {
        if (file == null)
        {
            return;
        }
        var contentAfterDotLast = Path.GetExtension(file.Name);

        if (!allowFileUpload.Contains(contentAfterDotLast))
        {
            snackbar.Add("Dạng file không đúng. Chỉ nhận file excel!", Severity.Error);
            return;
        }

        nameFileCurrent = file.Name;
        selectFileCurrent = file;
    }

    private bool ValidateForm()
    {
        int count = 0;
        if (users.FullName == null || users.FullName.Trim().Length == 0)
        {
            snackbar.Add("Họ và tên không được để trống!", Severity.Error);
            count += 1;
        }
        if (users.UserName == null || users.UserName.Trim().Length == 0)
        {
            snackbar.Add("Tên tài khoản không được để trống!", Severity.Error);
            count += 1;
        }
        if (users.DateOfBirth == null)
        {
            snackbar.Add("Ngày sinh không được để trống!", Severity.Error);
            count += 1;
        }
        if (users.Address == null || users.Address.Trim().Length == 0)
        {
            snackbar.Add("Địa chỉ không được để trống!", Severity.Error);
            count += 1;
        }
        if (users.Email == null || users.Email.Trim().Length == 0)
        {
            snackbar.Add("Email không được để trống!", Severity.Error);
            count += 1;
        }
        if (users.PasswordHash == null)
        {
            snackbar.Add("Mật khẩu không được để trống!", Severity.Error);
            count += 1;
        }
        if (users.PhoneNumber == null)
        {
            snackbar.Add("Số điện thoại không được để trống!", Severity.Error);
            count += 1;
        }
        if (count > 0)
        {
            return true;
        }
        else
        {
            return false;
        }
    }


    private async Task ExportTemPlateQuestion()
    {
        var response = await _serQuestion.ExportExcelQuestion();

        if (response.IsSuccessStatusCode)
        {
            var fileContent = await response.Content.ReadAsByteArrayAsync();
            var fileName = "Import_Account.xlsx";
            var fileUrl = $"data:application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;base64,{Convert.ToBase64String(fileContent)}";
            await jsruntime.InvokeVoidAsync("downloadFile", fileUrl, fileName);
        }
    }

    private async Task Submit(bool isType)
    {
        if (isType)
        {

            try
            {
                isLoading = true;

                if (levelId == null || levelId <= 0)
                {
                    snackbar.Add("Chưa chọn chức vụ", Severity.Warning);
                    return;
                }

                if (selectFileCurrent == null)
                {
                    snackbar.Add("Chưa chọn file excel!", Severity.Error);
                    return;
                }

                var check = await _serviceUser.ImportExcelUser(selectFileCurrent, levelId);
                snackbar.Add($"Thêm tài khoản thành công, trong đó có {check} không thêm được", Severity.Info);
                MudDialog.Close(DialogResult.Ok(true));
            }
            catch (Exception ex)
            {
                snackbar.Add($"Đã xảy ra lỗi: {ex.Message}", Severity.Error);
            }
            finally
            {
                isLoading = false;
            }
        }
        else
        {
            var checkValidation = ValidateForm();
            if (!checkValidation)
            {
                users.Status = 1;

                var check = await _serLec.CreateLecturer(users);
                if (check == true)
                {
                    MudDialog.Close(DialogResult.Ok(true));
                    snackbar.Add("Thêm thành công", Severity.Success);
                }
                else
                {
                    MudDialog.Close(DialogResult.Ok(true));
                    snackbar.Add("Thêm thất bại", Severity.Error);
                }
            }
        }
      

    }

    protected override async Task OnInitializedAsync()
    {
        _lstLevel = await _serLevel.GetAllLevel();

    }
    private async Task<IEnumerable<Level>> SearchLevel(string value, CancellationToken token)
    {
        if (string.IsNullOrEmpty(value))
            return _lstLevel;

        return _lstLevel.Where(x => x.Name.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }


}
<script>
    window.downloadFile = function (url, fileName) {
        const link = document.createElement('a');
        link.href = url;
        link.download = fileName;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    }
</script>
