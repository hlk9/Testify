@inject ExamScheduleService scheduleService
@inject ExamService examService
@inject SubjectService subjectService
<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
           Chi tiết lịch thi
        </MudText>
    </TitleContent>
    <DialogContent>
        <EditForm Model="@currentSchedule">
            <DataAnnotationsValidator />
            <MudTextField T="string" ReadOnly="true" @bind-Value="@currentSchedule.Title" For="@(() => currentSchedule.Title)" Label="Tiêu đề lịch thi này"></MudTextField>
            <MudGrid Class="mt-3 mb-3" Justify="Justify.SpaceBetween" Spacing="4">
                <MudItem Class="w-100">

                    <MudAutocomplete T="Subject"
                                     @bind-Value="subjectCurrent"
                                     Variant="Variant.Outlined"
                                     SearchFunc="SearchSubject"
                                     Label="Môn"
                                     ToStringFunc="@(e=> e==null?null : $"{e.Name}")"
                                     OnFocus="SubjectChanged" ReadOnly="true" />

                    <MudAutocomplete T="Exam"
                                     @bind-Value="examCurrent"
                                     Variant="Variant.Outlined"
                                     SearchFunc="SearchExam"
                                     Label="Bài thi"
                                     ToStringFunc="@(e=> e==null?null : $"{e.Name}")"
                                    ReadOnly="true" />

                </MudItem>
                <MudItem Class="w-50">
                    <MudDatePicker Editable="true" @bind-Date="@startDate" ReadOnly="true" DateFormat="dd/MM/yyyy" Label="Ngày bắt đầu" />
                    <MudTimePicker Editable="true" @bind-Time="@startTime" ReadOnly="true" PickerVariant="PickerVariant.Dialog" Label="Thời gian bắt đầu" />
                </MudItem>

                <MudItem Class="w-50">
                    <MudDatePicker Editable="true" @bind-Date="@endDate" ReadOnly="true" DateFormat="dd/MM/yyyy" Label="Ngày kết thúc" />
                    <MudTimePicker Editable="true" @bind-Time="@endTime" ReadOnly="true" PickerVariant="PickerVariant.Dialog" Label="Thời gian kết thúc" />
                </MudItem>
            </MudGrid>


            <MudTextField T="string" ReadOnly="true" @bind-Value="@currentSchedule.Description" For="@(() => currentSchedule.Description)" Label="Ghi chú"></MudTextField>
        </EditForm>

    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Surface" Variant="@Variant.Filled" OnClick=" Cancel">Đóng</MudButton>
      
    </DialogActions>
</MudDialog>
@code {
    [Parameter]
    public int Id { get; set; }
    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; }
    [Inject] ISnackbar Snackbar { get; set; }

    private ExamSchedule currentSchedule = new ExamSchedule();
    private DateTime? startDate;
    private DateTime? endDate;
    private TimeSpan? startTime;
    private TimeSpan? endTime;
    private List<Exam> listExam;
    private List<Subject> listSubject;
    private Exam examCurrent;
    private Subject subjectCurrent;


    protected override async Task OnInitializedAsync()
    {
        currentSchedule = await scheduleService.GetById(Id);
        examCurrent = await examService.GetExamId(currentSchedule.ExamId);
        subjectCurrent = await subjectService.GetSubId((int)currentSchedule.SubjectId);
        startDate = currentSchedule.StartTime.Date;
        endDate = currentSchedule.EndTime.Date;
        startTime = currentSchedule.StartTime.TimeOfDay;
        endTime = currentSchedule.EndTime.TimeOfDay;
    }

    private async Task<IEnumerable<Exam>> SearchExam(string value, CancellationToken token)
    {

        listExam = await examService.GetListOfSubject(subjectCurrent.Id);


        if (string.IsNullOrEmpty(value))
            return listExam;

        return listExam.Where(x => x.Name.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }


    private async Task<IEnumerable<Subject>> SearchSubject(string value, CancellationToken token)
    {

        listSubject = await subjectService.GetAllSub(null, true);


        if (string.IsNullOrEmpty(value))
            return listSubject;

        return listSubject.Where(x => x.Name.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }
    private async Task SubjectChanged()
    {
        listExam = await examService.GetListOfSubject(subjectCurrent.Id);
        examCurrent = null;
        StateHasChanged();

    }


   

    private void Cancel() => MudDialog.Cancel();
}

