@inject ExamScheduleService scheduleService
@inject ExamService examService
@inject SubjectService subjectService
<MudDialog>
    <TitleContent>
        <MudText Style="font-size: 18px; font-weight: bold; text-transform: uppercase">Tạo lịch thi mới</MudText>
    </TitleContent>
    <DialogContent>
        <EditForm Model="@currentSchedule" OnInvalidSubmit="SubmitValid">
            <DataAnnotationsValidator />
            <MudTextField T="string" @bind-Value="@currentSchedule.Title" For="@(() => currentSchedule.Title)" Label="Tiêu đề lịch thi này"></MudTextField>
            <MudGrid Class="mt-3 mb-3" Justify="Justify.SpaceBetween" Spacing="4">
                <MudItem Class="w-100">

                    <MudAutocomplete T="Subject"
                                     @bind-Value="subjectCurrent"
                                     SearchFunc="@SearchSubject"
                                     Variant="Variant.Outlined"
                                     Label="Môn"
                                     Placeholder="Chọn môn"
                                     Clearable="true"
                                     ToStringFunc="@(e=> e==null?null : $"{e.Name}")"
                                     OnFocus="SubjectChanged" />

                    <MudAutocomplete T="Exam"
                                     @bind-Value="examCurrent"
                                     SearchFunc="@SearchExam"
                                     Variant="Variant.Outlined"
                                     Label="Bài thi"
                                     Placeholder="Chọn bài thi"
                                     Clearable="true"
                                     ToStringFunc="@(e=> e==null?null : $"{e.Name}")"
                                     OnFocus="ExamChanged"
                                     ResetValueOnEmptyText="true" />

                </MudItem>
                <MudItem Class="w-50">
                    <MudDatePicker Editable="true" @bind-Date="@startDate" DateFormat="dd/MM/yyyy" Label="Ngày bắt đầu" />
                    <MudTimePicker Editable="true" @bind-Time="@startTime" PickerVariant="PickerVariant.Dialog" Label="Thời gian bắt đầu" />
                </MudItem>

                <MudItem Class="w-50">
                    <MudDatePicker Editable="true" @bind-Date="@endDate" DateFormat="dd/MM/yyyy" Label="Ngày kết thúc" />
                    <MudTimePicker Editable="true" @bind-Time="@endTime" PickerVariant="PickerVariant.Dialog" Label="Thời gian kết thúc" />
                </MudItem>
            </MudGrid>


            <MudTextField T="string" @bind-Value="@currentSchedule.Description" For="@(() => currentSchedule.Description)" Label="Ghi chú"></MudTextField>
        </EditForm>


    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Đóng</MudButton>
        <MudButton Color="Color.Primary" OnClick="SubmitValid">Tạo</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; }
    [Inject] ISnackbar Snackbar { get; set; }
    private ExamSchedule currentSchedule = new ExamSchedule();
    private DateTime? startDate;
    private DateTime? endDate;
    private TimeSpan? startTime;
    private TimeSpan? endTime;
    private List<Exam> listExam;
    private List<Subject> listSubject;
    private Exam examCurrent;
    private Subject subjectCurrent;


    private string[] _states =
       {
        "Alabama", "Alaska", "Arizona", "Arkansas", "California",
        "Colorado", "Connecticut", "Delaware", "Florida", "Georgia",
        "Hawaii", "Idaho", "Illinois", "Indiana", "Iowa", "Kansas",
        "Kentucky", "Louisiana", "Maine", "Maryland", "Massachusetts",
        "Michigan", "Minnesota", "Mississippi", "Missouri", "Montana",
        "Nebraska", "Nevada", "New Hampshire", "New Jersey", "New Mexico",
        "New York", "North Carolina", "North Dakota", "Ohio", "Oklahoma",
        "Oregon", "Pennsylvania", "Rhode Island", "South Carolina", "South Dakota",
        "Tennessee", "Texas", "Utah", "Vermont", "Virginia",
        "Washington", "West Virginia", "Wisconsin", "Wyoming"
    };

    private async Task SubjectChanged()
    {
        listExam = await examService.GetListOfSubject(subjectCurrent.Id);
        examCurrent = null;
        StateHasChanged();

    }

    private void ExamChanged()
    {
        listExam = null;
        examCurrent = null;
    }

    private async Task<IEnumerable<Exam>> SearchExam(string value, CancellationToken token)
    {

        try
        {

        listExam = await examService.GetListOfSubject(subjectCurrent.Id);
        }
        catch
        {

        }


        if (string.IsNullOrEmpty(value))
            return listExam;

        return listExam.Where(x => x.Name.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }


    private async Task<IEnumerable<Subject>> SearchSubject(string value, CancellationToken token)
    {

        listSubject = await subjectService.GetAllSub(null, true);


        if (string.IsNullOrEmpty(value))
            return listSubject;

        return listSubject.Where(x => x.Name.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }


    private async void SubmitValid()
    {
       
        
        DateTime startDateTime = startDate.Value.Date.Add(startTime.Value);
        DateTime endDateTime = endDate.Value.Date.Add(endTime.Value);
        if (subjectCurrent == null || startDate == null || startTime == null || endDate == null || endTime == null || examCurrent == null)
        {
            Snackbar.Add("Thất bại, Vui lòng kiểm tra lại thông tin", Severity.Error);
            return;
        }
        else
        {           

            if (startDateTime < DateTime.Now.AddMinutes(10))
            {
                Snackbar.Add("Thất bại, Thời gian bắt đầu phải trước 10 phút kể từ thời điểm hiện tại", Severity.Error);
                return;
            }

            TimeSpan duration = endDateTime - startDateTime;
            if (duration.TotalMinutes < examCurrent.Duration + 10)
            {
                Snackbar.Add("Thất bại, Thời gian thi phải lớn hơn thời gian làm bài thi ít nhất 10 phút", Severity.Error);
                return;
            }


            if (startDate.Value.Date.Add(startTime.Value) > endDate.Value.Date.Add(endTime.Value))
            {
                Snackbar.Add("Thất bại, Thời gian không hợp lệ", Severity.Error);
                return;
            }
            var ojb = await scheduleService.GetInTimeRange(startDateTime, endDateTime, subjectCurrent.Id);

            if (ojb != null)
            {
                Snackbar.Add("Thất bại, Thời gian xung đột với lịch thi " + ojb.Title + ", hãy kiểm tra lại", Severity.Error);
                return;
            }

            currentSchedule.RoomId = null;
            currentSchedule.SubjectId = subjectCurrent.Id;
            currentSchedule.ExamId = examCurrent.Id;
            currentSchedule.StartTime = startDate.Value.Date.Add(startTime.Value);
            currentSchedule.EndTime = endDate.Value.Date.Add(endTime.Value);
            currentSchedule.Status = 1;
            bool stats = await scheduleService.Create(currentSchedule);
            if (stats == true)
            {
                Snackbar.Add("Tạo lịch thi mới thành công", Severity.Success);
                MudDialog.Close(DialogResult.Ok(true));
                StateHasChanged();
            }
            else
            {
                Snackbar.Add("Thất bại, Vui lòng kiểm tra lại thông tin", Severity.Error);
            }


        }
    }



    private void Cancel() => MudDialog.Cancel();
}