@inject ExamService examService
@inject SubjectService subjectService

<MudDialog>
    <TitleContent>
        <MudText Style="font-size: 18px; font-weight: bold; text-transform: uppercase">Sửa bài thi</MudText>
    </TitleContent>
    <DialogContent>
        <EditForm Model="@exam" OnInvalidSubmit="SubmitValid">
            <DataAnnotationsValidator />
            <MudGrid Class="mt-3 mb-3" Justify="Justify.SpaceBetween">
                <MudItem Class="w-100">
                    <MudGrid>
                        <MudItem xs="6">
                            <MudTextField T="string" @bind-Value="exam.Name" For="@(() => exam.Name)" Label="Tên bài thi này" Variant="Variant.Outlined"></MudTextField>
                        </MudItem>
                        <MudItem xs="3">
                            <MudAutocomplete T="Subject"
                            @bind-Value="subjectCurrent"
                            SearchFunc="@SearchSubject"
                            Variant="Variant.Outlined"
                            Label="Môn"
                            Placeholder="Chọn môn"
                            Clearable="true"
                            ToStringFunc="@(e=> e==null?null : $"{e.Name}")"
                            OnFocus="SubjectChanged" />
                        </MudItem>
                        <MudItem xs="3">
                            <MudCheckBox @bind-Value="examAllowViewResult" Label="Cho phép xem kết quả" Color="Color.Primary"></MudCheckBox>
                        </MudItem>
                    </MudGrid>

                </MudItem>

                <MudItem Class="w-100">
                    <MudGrid>
                        <MudItem xs="3">
                            <MudTextField T="double" @bind-Value="exam.MaximmumMark" For="@(() => exam.MaximmumMark)" Label="Điểm tối đa" Variant="Variant.Outlined"></MudTextField>
                        </MudItem>
                        <MudItem xs="3">
                            <MudTextField T="double" @bind-Value="exam.PassMark" For="@(() => exam.PassMark)" Label="Điểm đạt" Variant="Variant.Outlined"></MudTextField>
                        </MudItem>
                        <MudItem xs="3">
                            <MudTextField T="int" @bind-Value="exam.NumberOfQuestions" For="@(() => exam.NumberOfQuestions)" Label="Tổng số câu" Variant="Variant.Outlined"></MudTextField>
                        </MudItem>
                        <MudItem xs="3">
                            <MudTextField T="int" @bind-Value="exam.Duration" For="@(() => exam.Duration)" Label="Thời gian" Variant="Variant.Outlined"></MudTextField>
                        </MudItem>
                    </MudGrid>
                </MudItem>

            </MudGrid>
            <MudItem Class="w-100">
                <MudGrid>
                    <MudItem xs="6">
                        <MudTextField T="int" @bind-Value="exam.NumberOfRepeat" For="@(() => exam.NumberOfRepeat)" Label="Số lần làm bài" Variant="Variant.Outlined"></MudTextField>
                    </MudItem>
                    <MudItem xs="6">
                        <MudTextField T="string" @bind-Value="exam.Description" For="@(() => exam.Description)" Label="Mô tả" Variant="Variant.Outlined"></MudTextField>
                    </MudItem>
                </MudGrid>
            </MudItem>


            <MudPaper Elevation="0">
                <MudRadioGroup T="byte" @bind-value="@status">
                    <MudRadio T="byte" Value="1">
                        Công khai
                    </MudRadio>
                    <MudRadio T="byte" Value="2">
                        Chưa công khai
                    </MudRadio>
                </MudRadioGroup>
                </MudPaper>
        </EditForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Đóng</MudButton>
        <MudButton Color="@Color.Warning" OnClick="SubmitValid">Sửa</MudButton>
    </DialogActions>
</MudDialog>


@code {
    [Parameter]
    public int Id { get; set; }
    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; }
    [Inject] ISnackbar Snackbar { get; set; }
    private void Cancel() => MudDialog.Cancel();
    private Exam exam = new Exam();
    private List<Exam> listExam;
    private List<Subject> listSubject;
    private Exam examCurrent;
    private Subject subjectCurrent;
    private byte status = 1;
    private bool examAllowViewResult { get; set; } = true;

    protected override async Task OnInitializedAsync()
    {
        exam = await examService.GetExamId(Id);
        status = exam.Status;
        subjectCurrent = await subjectService.GetSubId((int)exam.SubjectId);
        listSubject = await subjectService.GetAllSub(null, true);
    }

    private async Task<IEnumerable<Subject>> SearchSubject(string value, CancellationToken token)
    {

        listSubject = await subjectService.GetAllSub(null, true);


        if (string.IsNullOrEmpty(value))
            return listSubject;

        return listSubject.Where(x => x.Name.Contains(value, StringComparison.InvariantCultureIgnoreCase));



    }
    private async Task SubjectChanged()
    {
        listExam = await examService.GetListOfSubject(subjectCurrent.Id);
        examCurrent = null;
        StateHasChanged();

    }


    private async Task SubmitValid()
    {
        if (subjectCurrent == null || exam.Name == null || exam.MaximmumMark == null || exam.PassMark == null || exam.NumberOfQuestions == null || exam.Duration == null ||exam.NumberOfRepeat == null)
        {
            Snackbar.Add("Thất bại, Vui lòng kiểm tra lại thông tin", Severity.Error);
            return;
        }
        else
        {
            var lstExamDetail = await _serExamDetail.GetExamDetailByExamId(exam.Id);
            var lstExamDetailFormat = lstExamDetail.Where(x => x.Status != 255).ToList();
            if (!lstExamDetailFormat.Any() && status == 1)
            {
                snackbar.Add("Thất bại, Không có đề thi nên không thể công khai", Severity.Warning);
                return;
            }
            if (exam.MaximmumMark <= 0)
            {
                Snackbar.Add("Thất bại, Điểm tối đa không được nhỏ hơn 0", Severity.Error);
                return;
            }
            if (exam.PassMark <= 0)
            {
                Snackbar.Add("Thất bại, Điểm đạt không được nhỏ hơn 0", Severity.Error);
                return;
            }
            if (exam.PassMark > exam.MaximmumMark)
            {
                Snackbar.Add("Thất bại, Điểm đạt không lớn hơn điểm tối đa", Severity.Error);
                return;
            }
            if (exam.NumberOfQuestions <= 0)
            {
                Snackbar.Add("Thất bại, Tổng số câu không được nhỏ hơn 0", Severity.Error);
                return;
            }
            if (exam.Duration <= 0)
            {
                Snackbar.Add("Thất bại, Thời gian cho bài thi không được nhỏ hơn 0", Severity.Error);
                return;
            }
            if (exam.NumberOfRepeat < 1)
            {
                Snackbar.Add("Thất bại, Số lần làm bài thi không được nhỏ hơn 1", Severity.Error);
                return;
            }

            exam.ScoreMethodId = null;
            exam.SubjectId = subjectCurrent.Id;
            exam.AllowViewResult = examAllowViewResult;
            exam.Status = status;
            bool stats = await examService.UpdateExam(exam);
            if (stats == true)
            {
                Snackbar.Add("Cập nhật bài thi thành công", Severity.Success);
                MudDialog.Close(DialogResult.Ok(true));
                StateHasChanged();
            }
            else
            {
                Snackbar.Add("Thất bại, Vui lòng kiểm tra lại thông tin", Severity.Error);
            }
               
            
        }
    }

}
