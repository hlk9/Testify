@page "/Examiner/ExamManagement/CreateExam"
@layout AdminLayout
@inject ExamService examService
@inject SubjectService subjectService

<MudDialog>
    <TitleContent>
        <MudText Style="font-size: 18px; font-weight: bold; text-transform: uppercase">Tạo bài thi mới</MudText>
    </TitleContent>
    <DialogContent>
        <EditForm Model="@exam" OnInvalidSubmit="SubmitValid">
            <DataAnnotationsValidator />

            <MudTextField T="string" @bind-Value="exam.Name" For="@(() => exam.Name)" Label="Tên bài thi này" Variant="Variant.Outlined"></MudTextField>

            <MudAutocomplete Class="py-4" T="Subject" @bind-Value="subjectCurrent" SearchFunc="@SearchSubject" Variant="Variant.Outlined" Label="Môn" Placeholder="Chọn môn" 
            Clearable="true" ToStringFunc="@(e=> e==null?null : $"{e.Name}")" OnFocus="SubjectChanged" />

            <MudGrid>
                <MudItem xs="3">
                    <MudTextField T="double" @bind-Value="exam.MaximmumMark" For="@(() => exam.MaximmumMark)" Label="Điểm tối đa" Variant="Variant.Outlined"></MudTextField>
                </MudItem>
                <MudItem xs="3">
                    <MudTextField T="double" @bind-Value="exam.PassMark" For="@(() => exam.PassMark)" Label="Điểm đạt" Variant="Variant.Outlined"></MudTextField>
                </MudItem>
                <MudItem xs="3">
                    <MudTextField T="int" @bind-Value="exam.NumberOfQuestions" For="@(() => exam.NumberOfQuestions)" Label="Tổng số câu" Variant="Variant.Outlined"></MudTextField>
                </MudItem>
                <MudItem xs="3">
                    <MudTextField T="int" @bind-Value="exam.Duration" For="@(() => exam.Duration)" Label="Thời gian" Variant="Variant.Outlined"></MudTextField>
                </MudItem>
            </MudGrid>

            <MudItem Class="w-100">
                <MudGrid>
                    <MudItem xs="6">
                        <MudTextField T="int" @bind-Value="exam.NumberOfRepeat" For="@(() => exam.NumberOfRepeat)" Label="Số lần làm bài" Variant="Variant.Outlined"></MudTextField>
                    </MudItem>
                    <MudItem xs="3">
                        <MudTextField T="string" @bind-Value="exam.Description" For="@(() => exam.Description)" Label="Mô tả" Variant="Variant.Outlined"></MudTextField>
                    </MudItem>
                    <MudItem xs="3">
                        <MudCheckBox @bind-Value="examAllowViewResult" Label="Cho phép xem kết quả" Color="Color.Primary" Variant="Variant.Outlined"></MudCheckBox>
                    </MudItem>
                </MudGrid>
            </MudItem>

        </EditForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Đóng</MudButton>
        <MudButton Color="Color.Primary" OnClick="SubmitValid">Tạo</MudButton>
    </DialogActions>
</MudDialog>



@code {
    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; }
    [Inject] ISnackbar Snackbar { get; set; }
    private void Cancel() => MudDialog.Cancel();
    private Exam exam = new Exam();
    private List<Exam> listExam;
    private List<Subject> listSubject;
    private Exam examCurrent;
    private Subject subjectCurrent;
    private int ExamId = -1;
    MudForm form;
    private bool examAllowViewResult { get; set; } = true;

    private bool isShowAddExam = false;
    private ExamDetail examdetail { get; set; } = new();
    private List<ExamDetail> lisDThi = new List<ExamDetail>();

    private void RemoveExamDetail(int examdetailId)
    {
        lisDThi.RemoveAt(examdetailId);
    }
    private async Task SubjectChanged()
    {
        listExam = await examService.GetListOfSubject(subjectCurrent.Id);
        examCurrent = null;
        StateHasChanged();

    }
    private async Task SaveExamDetailInExam()
    {

    }
    private async Task<IEnumerable<Subject>> SearchSubject(string value, CancellationToken token)
    {

        listSubject = await subjectService.GetAllSub(null, true);


        if (string.IsNullOrEmpty(value))
            return listSubject;

        return listSubject.Where(x => x.Name.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    private async void SubmitValid()
    {
       
        

        if (subjectCurrent == null || exam.Name == null || exam.MaximmumMark == null || exam.PassMark == null || exam.NumberOfQuestions == null || exam.Duration == null)
        {
            Snackbar.Add("Thất bại, Vui lòng điền đầy đủ  thông tin", Severity.Warning);
            return;
        }
        else
        {
            var checktrungTen_Exam = await _serExam.IsExamCodeDuplicate_Exam(exam.Name.Trim().ToUpper().ToLower(), subjectCurrent.Id);

            if (exam.MaximmumMark <= 0)
            {
                Snackbar.Add("Thất bại, Điểm tối đa không được nhỏ hơn 0", Severity.Warning);
                return;
            }
            else if (exam.PassMark > exam.MaximmumMark)
            {
                Snackbar.Add("Thất bại, Điểm đạt không lớn hơn điểm tối đa", Severity.Error);
                return;
            }
            else if (exam.PassMark <= 0)
            {
                Snackbar.Add("Thất bại, Điểm đạt không được nhỏ hơn 0", Severity.Warning);
                return;
            }
            else if (exam.NumberOfQuestions <= 0)
            {
                Snackbar.Add("Thất bại, Tổng số câu không được nhỏ hơn 0", Severity.Warning);
                return;
            }
            else if (exam.Duration <= 0)
            {
                Snackbar.Add("Thất bại, Thời gian cho bài thi không được nhỏ hơn 0", Severity.Warning);
                return;
            }
            else if (checktrungTen_Exam)
            {
                Snackbar.Add("Thất bại! Tên bài thi đã tồn tại, vui lòng nhập tên khác! ", Severity.Warning);
                return;
            }
            else if (exam.NumberOfRepeat < 1)
            {
                Snackbar.Add("Thất bại, Số lần làm bài thi không được nhỏ hơn 1", Severity.Error);
                return;
            }
            else
            {
                var userId = await ProtectedSessionStore.GetAsync<string>("userLogin");
                exam.ScoreMethodId = null;
                exam.SubjectId = subjectCurrent.Id;
                exam.Status = 2;
                var stats = await examService.CreateExam(exam);
                if (stats != null)
                {
                    // examdetail.ExamId = stats.Id;
                    // examdetail.CreateBy = Guid.Parse(userId.Value);
                    // examdetail.UpdateBy = Guid.Parse(userId.Value);
                    // examdetail.CreateDate = DateTime.Now;
                    // examdetail.UpdateDate = DateTime.Now;
                    // examdetail.Status = 1;
                    // var objNewExamDetail = await _serExamDetail.CreateExamDetail(examdetail);
                    Snackbar.Add("Tạo bài thi mới thành công", Severity.Success);
                    MudDialog.Close(DialogResult.Ok(true));
                    StateHasChanged();
                }
                else
                {
                    Snackbar.Add("Thất bại, Vui lòng kiểm tra lại thông tin", Severity.Error);
                }
            }
        }
    }

    private void IsShowAddExam()
    {
        // if (isShowAddExam == -1 || isShowAddExam <= 0)
        // {
        //     snackbar.Add("Vui lòng chọn loại câu hỏi!", Severity.Warning);
        //     return;
        // }
        isShowAddExam = !isShowAddExam;
    }

        //============

}
