@page "/Examiner/ClassManagement"
@layout ExaminerLayout
@using Testify.DAL.ViewModels
@using Testify.Web.Data.Commons
@using Testify.Web.Shared
@inject IDialogService DialogService
<style>
    .img-icon-listclass {
        width: 25px;
        height: 25px;
        margin-top: 15px;
    }

    .input-search-end {
        color: #8e8e8e;
        padding-left: 15px;
    }

    .add-button-end {
        background-color: #29A69A;
        color: white;
        width: 100%;
    }

        .add-button-end:hover {
            background-color: white;
            color: #29a69a;
        }

    .icon-input-search {
        padding-left: 100px;
    }

</style>
<div style="font-family:Roboto; padding:30px; height:calc(100svh - 64px); background-color:#fafafa">

  
        <MudPaper Style="padding:15px;">
            <MudText Class="fw-bold" Style="font-size:22px; color:#29A69A">LỚP HỌC</MudText>
        </MudPaper>
        <MudGrid Style="padding:20px 0 ">
            <MudItem xl="10" lg="9" md="8" sm="7" xs="12">

            </MudItem>
            <MudItem xl="2" lg="3" md="4" sm="5" xs="12">
                <MudButton OnClick="@(() => OpenDialogAsync(_maxWidth,OpenDialogType.Create, -1))" Class="add-button-end" Variant="Variant.Filled">Thêm mới</MudButton>
            </MudItem>
        </MudGrid>

        <div class="bg-white rounded-3" style="width:100%;">
            @if (isLoading)
            {
                <LoadingContext />
            }
            else
            {
                <MudTable Items="@classWithUsers" Dense="true" Hover="true" Virtualize="true" FixedHeader="true" HorizontalScrollbar="true" Height="calc(100svh - 384px)">
                    <ToolBarContent>
                        <MudGrid Style="align-items:center;padding:0px; margin:0;width:100%">
                            <MudItem xl="6" lg="6" md="6" sm="4" xs="12" Style="padding:0px; margin:0;">
                          
                                <MudText Style="font-size: 22px; font-weight: bold;color:#29a69a">Danh sách lớp học</MudText>

                            </MudItem>
                            <MudItem xl="6" lg="6" md="6" sm="8" xs="12" Style="padding:0px; margin:0;">
                                <MudTextField T="string" Placeholder="Search" Adornment="Adornment.Start" @bind-Value="searchValue"
                                              AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0" TextChanged="onChangeSearch" Immediate="true"></MudTextField>
                            </MudItem>
                        </MudGrid>
                    </ToolBarContent>
                    <HeaderContent>
                        <MudTh><MudTableSortLabel SortLabel="Tên lớp học" T="string">Tên lớp học</MudTableSortLabel></MudTh>
                        <MudTh><MudTableSortLabel SortLabel="Giáo viên quản lý" T="string">Giáo viên quản lý</MudTableSortLabel></MudTh>
                        <MudTh><MudTableSortLabel SortLabel="Môn Học" T="string">Môn Học</MudTableSortLabel></MudTh>
                        <MudTh><MudTableSortLabel SortLabel="Số lượng Học Sinh" T="string">Số lượng Học Sinh</MudTableSortLabel></MudTh>
                        <MudTh><MudTableSortLabel SortLabel="Trạng thái" T="string">Trạng thái</MudTableSortLabel></MudTh>
                        <MudTh><MudTableSortLabel SortLabel="Thao tác" T="string">Thao tác</MudTableSortLabel></MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        @if (context.Status == Convert.ToByte(StatusType.isActive))
                        {
                            <MudTd DataLabel="Tên lớp học">@context.Name</MudTd>
                            <MudTd DataLabel="Giáo viên quản lý">
                                @if (_lstUser != null)
                                {
                                    foreach (var item in _lstUser)
                                    {
                                        if (item.Id == context.TeacherId)
                                        {
                                            @item.FullName
                                            ;
                                            break;
                                        }
                                    }
                                }
                            </MudTd>
                            <MudTd DataLabel="Môn Học">
                                @if (_lstSubject != null)
                                {
                                    foreach (var item in _lstSubject)
                                    {
                                        if (item.Id == context.SubjectId)
                                        {
                                            @item.Name
                                            ;
                                            break;
                                        }
                                    }
                                }
                            </MudTd>
                            <MudTd style="cursor: pointer" DataLabel="Số lượng Học Sinh" onclick="@(() => OpenDialogAsync(_maxWidth, OpenDialogType.List, context.Id))">
                                @context.CountUser/@context.Capacity
                                <MudBadge Content="@context.CountConfirm" Color="Color.Primary" Overlap="true" Class="mx-6 my-4">
                                    <MudIcon Icon="@Icons.Material.Filled.Notifications" Color="Color.Default" />
                                </MudBadge>
                            </MudTd>
                            <MudTd DataLabel="Trạng thái">
                                @if (context.Status == Convert.ToByte(StatusType.isActive))
                                {
                                    <span>Hoạt động</span>
                                }
                                else
                                {
                                    <span>Không hoạt động</span>
                                }
                            </MudTd>

                            <MudTd DataLabel="Thao tác">
                                <MudIconButton OnClick="@(()=> OpenDialogAsync(_maxWidth,OpenDialogType.Update, context.Id))" Icon="@Icons.Material.Filled.BorderColor" aria-label="update"></MudIconButton>
                                <MudIconButton OnClick="@(()=> OpenDialogAsync(_maxWidth,OpenDialogType.Detail, context.Id))" Icon="@Icons.Material.Filled.Notes" aria-label="details"></MudIconButton>
                                <MudIconButton OnClick="@(()=> OpenDialogAsync(_maxWidth,OpenDialogType.Delete, context.Id))" Icon="@Icons.Material.Filled.Delete" aria-label="delete"></MudIconButton>
                            </MudTd>
                        }

                    </RowTemplate>

                    <NoRecordsContent>
                        <MudText>Không có lớp nào</MudText>
                    </NoRecordsContent>
                    <LoadingContent>
                        <MudText>Loading...</MudText>
                    </LoadingContent>
                    <PagerContent>
                        <MudTablePager />
                    </PagerContent>
                </MudTable>
            }

        </div>
   


</div>
@code {
    private bool isLoading { get; set; } = true;
    private List<User> _lstUser;
    private List<Subject> _lstSubject;
    private int Index = -1;
    private List<ClassWithUser>? classWithUsers { get; set; } = new List<ClassWithUser>();
    private string searchValue = "";
    private int countUser = 0;
    private int countConfirm = 0;
    private List<User> user = new List<User>();
    private int ID_Level = 0;
    private string Name_Teacher = "";


    private List<ClassUser> _lstClassUser = new List<ClassUser>();

    private async Task onChangeSearch()
    {
        await LoadData(searchValue);
    }

    private async Task LoadData(string? textSearch)
    {
        //Hop chinhr sauwr 29-11
        user = await _serUser.GetUsers();
        var a = await ProtectedSessionStore.GetAsync<string>("userLogin");
        var userId = Guid.Parse(a.Value);
        var RoleUserView = user.Where(x => x.Id == userId).FirstOrDefault();
        ID_Level = RoleUserView.LevelId;
        Name_Teacher = RoleUserView.FullName;

        if (ID_Level == 1 || ID_Level == 2)
        {
            _lstUser = await _serLec.GetAllTeacher();
            _lstSubject = await _serSub.GetAllSub(textSearch, true);
            classWithUsers = await _serClass.GetAllClass(textSearch, true);
            isLoading = false;
        }else if (ID_Level == 3)
        {
            _lstUser = await _serLec.GetAllTeacher();
            _lstSubject = await _serSub.GetAllSub(textSearch, true);
            classWithUsers = await _serClass.GetAllClass_OfTeacher(textSearch, true, userId);
            isLoading = false;
        }else
        {
            
        }

        
    }

   protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadData("");
            StateHasChanged();
        }
    }

   

    private readonly DialogOptions _maxWidth = new() { MaxWidth = MaxWidth.Large, FullWidth = true };

    private async Task OpenDialogAsync(DialogOptions options, string name, int id)
    {
        var updateParaeters = new DialogParameters<Dialog.Class.UpdateClassDialog>
        {
            {x => x.ClassId, id}
        };

        var dialogParametersDel = new DialogParameters<Dialog.Class.DeleteClassDialog>
        {
            {x => x.ClassId, id}
        };

        var dialogParametersDetail = new DialogParameters<Dialog.Class.DetailsClassDialog>
        {
            {x => x.ClassId, id}
        };

        var dialogParametersList = new DialogParameters<Dialog.Class.ListUserDialog>
        {
            {x => x.ClassId, id}
        };

        if (name.Equals(OpenDialogType.Create))
        {
            var dialog = await DialogService.ShowAsync<Dialog.Class.CreateClassDialog>("Options Dialog", options);
            var result = await dialog.Result;
            if (!result.Canceled)
            {
                await LoadData("");
            }
        }
        else if (name.Equals(OpenDialogType.Update))
        {
            var dialog = await DialogService.ShowAsync<Dialog.Class.UpdateClassDialog>("Options Dialog", updateParaeters, options);
            var result = await dialog.Result;
            if (!result.Canceled)
            {
                await LoadData("");
            }
        }
        else if (name.Equals(OpenDialogType.Detail))
        {
            var dialog = await DialogService.ShowAsync<Dialog.Class.DetailsClassDialog>("Options Dialog", dialogParametersDetail, options);
            var result = await dialog.Result;
            if (!result.Canceled)
            {
                await LoadData("");
            }
        }
        else if (name.Equals(OpenDialogType.List))
        {
            var dialog = await DialogService.ShowAsync<Dialog.Class.ListUserDialog>("Options Dialog", dialogParametersList, options);
            var result = await dialog.Result;
            if (!result.Canceled)
            {
                await LoadData("");
            }
        }
        else
        {
            var dialog = await DialogService.ShowAsync<Dialog.Class.DeleteClassDialog>("Options Dialog", dialogParametersDel, options);
            var result = await dialog.Result;
            if (!result.Canceled)
            {
                await LoadData("");
            }
        }

    }
}
