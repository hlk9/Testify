@page "/"

<style>
    /* CSS để làm mờ và ẩn thông báo lỗi */
    @@keyframes fadeIn {
        0% { opacity: 0; }
        100% { opacity: 1; }
    }

    @@keyframes fadeOut {
        0% { opacity: 1; }
        100% { opacity: 0; }
    }

    .alert-fade-in {
        animation: fadeIn 0.5s forwards; /* Hiển thị thông báo */
    }

    .alert-fade-out {
        animation: fadeOut 0.5s forwards; /* Ẩn thông báo sau 3s */
    }

    @@media (max-width: 720px) {
        .rounded-custom {
            border-radius: 0px !important;
        }

        .loginRange {
            width: 100% !important;
        }
    }

    @@media (min-width: 1500px) {
        .loginRange {
            width: 70% !important;
        }
    }
</style>

<MudGrid Spacing="0" Class="m-0 w-100 align-items-center" Justify="Justify.SpaceBetween" Style="background-color:#29A69A; height:100vh">
    <MudItem sm="12" md="12" xs="12" lg="7" Class="d-flex h-100 justify-center align-items-center flex-column rounded-xs-0 pa-3 rounded-custom" Style="background-color: #FFFFFF; border-top-right-radius:50px; border-bottom-right-radius:50px">

        <MudPaper Class="w-100 p-5 m-3" Elevation="0">
            <MudGrid Justify="Justify.SpaceBetween" Spacing="12">
                <MudItem lg="6" Class="d-flex justify-start">
                    Logo
                </MudItem>
                <MudItem lg="6" Class="d-flex justify-end">
                    <MudButton Color="Color.Primary" Class="ps-3 pe-3 pt-2 pb-2" Variant="Variant.Outlined" @onclick="NavigateToRegister">Đăng ký</MudButton>
                </MudItem>
            </MudGrid>
        </MudPaper>

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <MudAlert Class="@(showAlert ? "alert-fade-in" : "alert-fade-out")" Severity="Severity.Error" Variant="Variant.Filled">
                @errorMessage
            </MudAlert>
        }

        <MudPaper Elevation="0" Class="p-0 p-md-5 loginRange" Style="width:60%" Height="100%">
            <MudText Style="font-size:22px; font-weight:bold" Class="text-center">Đăng nhập bằng tài khoản Testify của bạn</MudText>
            <MudTextField T="string" @bind-Value="username" Class="mt-3 mb-3" Placeholder="Email/Số điện thoại" Variant="Variant.Outlined" FullWidth="true"></MudTextField>
            <MudTextField T="string" @bind-Value="password" Class="mt-3 mb-3" Placeholder="Mật khẩu" Variant="Variant.Outlined" InputType="@PasswordInput" Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon" OnAdornmentClick="ButtonTestclick" AdornmentAriaLabel="Show Password" FullWidth="true"></MudTextField>
            <MudText Class="mt-3 mb-3" Align="Align.End" @onclick="NavigateToPasswordRetrieval">Quên mật khẩu?</MudText>

            <MudButton Color="Color.Primary" Variant="Variant.Filled" Class="w-100 rounded-4" @onclick="LoginNew">Tiếp tục</MudButton>

            <MudText Class="text-center mt-4 mb-4">Hoặc</MudText>

            <MudGrid Spacing="4" Justify="Justify.SpaceBetween">
                <MudItem lg="6" Class="d-flex justify-center">
                    <MudButton Class="d-flex p-2" Variant="Variant.Outlined" Style="border: 1px solid #DDDDDD">
                        <img class="w-6 h-6" src="https://www.svgrepo.com/show/448224/facebook.svg" width="10%">
                        <span style="text-transform:none" class="m-2">Facebook</span>
                    </MudButton>
                </MudItem>
                <MudItem lg="6" Class="d-flex justify-center">
                    <MudButton Class="d-flex p-2" Variant="Variant.Outlined" Style="border: 1px solid #DDDDDD">
                        <img class="w-6 h-6" src="https://www.svgrepo.com/show/475656/google-color.svg" width="10%">
                        <span style="text-transform:none" class="m-2">Google</span>
                    </MudButton>
                </MudItem>
            </MudGrid>
        </MudPaper>
    </MudItem>

    <MudItem Class="p-0 pe-5 d-none d-md-none d-lg-block" Style="margin-right:4%">
        <svg width="496" height="555" viewBox="0 0 496 555" fill="none" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
            <rect width="496" height="555" fill="url(#pattern0_130_221)" />
            <defs>
                <pattern id="pattern0_130_221" patternContentUnits="objectBoundingBox" width="1" height="1">
                    <use xlink:href="#image0_130_221" transform="matrix(0.00178746 0 0 0.00159744 -0.0594758 0)" />
                </pattern>
            </defs>
        </svg>
    </MudItem>
</MudGrid>

@code {
    private string username;
    private string password;
    private string errorMessage;
    private bool showAlert = false;
    [Inject] NavigationManager Navigation { get; set; }

    private void NavigateToPasswordRetrieval()
    {
        Navigation.NavigateTo("/PasswordRetrieval");
    }

    [Inject] NavigationManager NavigationRegister { get; set; }

    private void NavigateToRegister()
    {
        NavigationRegister.NavigateTo("/Register");
    }

    bool isShow;
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    void ButtonTestclick()
    {
        if (isShow)
        {
            isShow = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            isShow = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }

    private async Task LoginNew()
    {
        var user = AuthenticateUser(username, password);

        if (user != null)
        {
            if (user.Role == "Admin")
            {
                Navigation.NavigateTo("/admin");
            }
            else if (user.Role == "User")
            {
                Navigation.NavigateTo("/user");
            }
        }
        else
        {
            errorMessage = "Đăng nhập không thành công. Vui lòng kiểm tra lại tên người dùng và mật khẩu.";
            showAlert = true; // Hiển thị thông báo lỗi
            StateHasChanged(); // Trigger re-render to show the alert immediately

            // Wait for 3 seconds and then clear the error message
            await Task.Delay(3000);
            showAlert = false;
            errorMessage = null;
            StateHasChanged(); // Trigger re-render to hide the alert
        }
    }

    private User AuthenticateUser(string username, string password)
    {
        // Replace this with actual authentication logic (e.g., database check)
        if (username == "admin@example.com" && password == "admin")
        {
            Navigation.NavigateTo("/admin/home");
        }
        else if (username == "user@example.com" && password == "user")
        {
            Navigation.NavigateTo("/user");
        }
        return null;
    }

    private class User
    {
        public string Role { get; set; }
    }
}
