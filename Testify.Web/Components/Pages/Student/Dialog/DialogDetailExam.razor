@using Testify.DAL.ViewModels
@inject IJSRuntime JS

@if(isLoading)
{
        <Testify.Web.Shared.LoadingContext />
}
else
{
    <MudDialog Class="w-50">
        <DialogContent>
            <div class="p-2 m-2">
                <MudText Style="font-weight: bold; font-size: 20px; text-align:center">Bài thi giữa kì II</MudText>
                <MudGrid Class="p-0 m-0 w-100 align-items-center ">
                    <MudItem Class=" d-flex justify-space-between flex-grow-1 gap-4">
                        <MudItem xl="5">
                           
                            <MudText Style="font-weight: bold; font-size: 14px; color: #787878; margin: 10px 0">Thời gian làm bài</MudText>
                            <MudText Style="font-weight: bold; font-size: 14px; color: #787878; margin: 10px 0">Thời gian mở đề</MudText>
                            <MudText Style="font-weight: bold; font-size: 14px; color: #787878; margin: 10px 0">Thời gian kết thúc</MudText>
                            <MudText Style="font-weight: bold; font-size: 14px; color: #787878; margin: 10px 0">Số lượng câu hỏi</MudText>
                            <MudText Style="font-weight: bold; font-size: 14px; color: #787878; margin: 10px 0">Môn học</MudText>
                        </MudItem>
                        <MudItem xl="2"></MudItem>
                        <MudItem xl="5">
                            
                            <MudText Style="font-weight: bold; font-size: 14px; color: #787878; margin: 10px 0">@_ListExamsOfStudent.Duration phút</MudText>
                            <MudText Style="font-weight: bold; font-size: 14px; color: #787878; margin: 10px 0">@_ListExamsOfStudent.ExamScheduleStartTime</MudText>
                            <MudText Style="font-weight: bold; font-size: 14px; color: #787878; margin: 10px 0">@_ListExamsOfStudent.ExamScheduleEndTime</MudText>
                            <MudText Style="font-weight: bold; font-size: 14px; color: #787878; margin: 10px 0">@_ListExamsOfStudent.TotalQuestion</MudText>
                            <MudText Style="font-weight: bold; font-size: 14px; color: #787878; margin: 10px 0">@_ListExamsOfStudent.SubjectName</MudText>

                        </MudItem>
                    </MudItem>
                </MudGrid>
                @if (DateTime.Now >= _ListExamsOfStudent.ExamScheduleStartTime && DateTime.Now <= _ListExamsOfStudent.ExamScheduleEndTime)
                {
                    <MudButton OnClick="Open" Style="background-color: #29a69a;width:100%; color: #fff ;margin-top:20px;">Vào thi</MudButton>

                }
                else if (DateTime.Now < _ListExamsOfStudent.ExamScheduleStartTime)
                {
                    <MudButton OnClick="Open" Disabled Color="Color.Surface" Style="width:100%; color: #fff ;margin-top:20px;">Chưa mở</MudButton>

                }
                else if (DateTime.Now > _ListExamsOfStudent.ExamScheduleEndTime)
                {
                    <MudButton OnClick="Open" Disabled Color="Color.Surface" Style="width:100%; color: #fff ;margin-top:20px;">Đã kết thúc bài thi</MudButton>
                }
                @if(numberofsubmit == limitofsubmit)
                {
                    <MudButton OnClick="Open" Disabled Color="Color.Surface" Style="width:100%; color: #fff ;margin-top:20px;">Hết số lần làm bài</MudButton>
                }
              



            </div>


        </DialogContent>
    </MudDialog>
}


@code {
    [Parameter]
    public int ExamScheduleId { get; set; }
    private List<ListExamsOfStudent> _list = new List<ListExamsOfStudent>();
    private ListExamsOfStudent _ListExamsOfStudent = new ListExamsOfStudent();
    private Guid userId = Guid.NewGuid();
    bool Active;
    private bool isLoading = true;

    private int limitofsubmit;
    private int numberofsubmit;
    private int examscheduleId;
    public Exam exam { get; set; }

    [Parameter]
    public int idExam { get; set; }

    protected async override Task OnInitializedAsync()
    {
        try
        {
            isLoading = true;
            var a = await ProtectedSessionStore.GetAsync<string>("userLogin");
            userId = Guid.Parse(a.Value);
            _list = await _serLec.GetListExam(userId);
            exam = await _serExam.GetExamId(idExam);
            _ListExamsOfStudent = _list.FirstOrDefault(x => x.ExamScheduleId == ExamScheduleId);
        }
        catch
        {

        }
        finally
        {
            isLoading = false;
        }

        numberofsubmit = await _serSubmission.NumberSubmit(userId, examscheduleId);
        limitofsubmit = exam.NumberOfRepeat;
    }
   
    private async void Open()
    {

        var lst = await _serExamActLog.GetAllByUserAndExamIdAndScheduleId(userId, _ListExamsOfStudent.ExamId, _ListExamsOfStudent.ExamScheduleId);
        if(lst.Count>= exam.NumberOfRepeat)
        {
            await JS.InvokeVoidAsync("alert", "Hết số lần làm bài");
            return;
        }
        await localStorage.SetItemAsync("ExamScheduleId", ExamScheduleId);
        navigation.NavigateTo($"/ExamTest/{_ListExamsOfStudent.ExamId}");
    }

    private bool ValidationForm()
    {

        if(DateTime.Now >= _ListExamsOfStudent.ExamScheduleStartTime && DateTime.Now <= _ListExamsOfStudent.ExamScheduleEndTime)
        {
            Active = true;
            return true;
        }
        else
        {
            Active = false;
            return false;
        }

       
    }
}
